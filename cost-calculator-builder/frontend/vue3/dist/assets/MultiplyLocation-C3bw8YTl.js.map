{"version":3,"file":"MultiplyLocation-C3bw8YTl.js","sources":["../../src/widget/features/calculator-fields/components/Geolocation/styles/MultiplyLocation.vue"],"sourcesContent":["<template>\n  <div class=\"ccb-multiply-location\">\n    <div class=\"ccb-multiply-location__input-wrapper\">\n      <button class=\"ccb-multiply-location__action\" @click=\"showPopup\">\n        <span class=\"icon\">\n          <i class=\"ccb-icon-location\"></i>\n        </span>\n        <span class=\"label\">{{\n          translationsStore.getTranslations.openMap\n        }}</span>\n      </button>\n      <div class=\"ccb-multiply-location__description\">\n        <span v-if=\"!field.selectedPoint.addressName\">{{\n          translationsStore.getTranslations.chooseFromMap\n        }}</span>\n        <span v-else class=\"ccb-multiply-location__adressname\">\n          {{ field.selectedPoint.addressName }}\n        </span>\n      </div>\n    </div>\n    <CCBPopup ref=\"popup\">\n      <div class=\"ccb-location-modal\">\n        <div class=\"ccb-location-modal__body\">\n          <div class=\"ccb-location-modal__sidebar\">\n            <div class=\"ccb-location-modal__title\">\n              {{ translationsStore.getTranslations.selectLocation }}\n            </div>\n            <div class=\"ccb-location-modal__locations\">\n              <div\n                v-for=\"location in multiplyLocations\"\n                :key=\"location.addressName\"\n                class=\"ccb-default-radio\"\n              >\n                <label>\n                  <input\n                    v-model=\"field.selectedPoint\"\n                    type=\"radio\"\n                    :name=\"location.label\"\n                    :value=\"location\"\n                    :checked=\"\n                      field.selectedPoint.addressName === location.addressName\n                    \"\n                  />\n                  <span class=\"ccb-radio-label\">{{\n                    location.label.length\n                      ? location.label\n                      : location.addressName\n                  }}</span>\n                </label>\n              </div>\n            </div>\n          </div>\n          <div :id=\"randomID\" class=\"ccb-location-modal__map\"></div>\n        </div>\n        <div class=\"ccb-location-modal__footer\">\n          <CCBButton\n            type=\"light\"\n            :text=\"translationsStore.getTranslations.clearLocation\"\n            :class=\"['clear', { disable: disableClear }]\"\n            @click=\"resetLocation\"\n          ></CCBButton>\n          <CCBButton\n            type=\"light\"\n            :text=\"translationsStore.getTranslations.cancel\"\n            @click=\"hidePopup\"\n          ></CCBButton>\n          <CCBButton\n            type=\"success\"\n            :text=\"translationsStore.getTranslations.saveLocation\"\n            @click=\"setLocation\"\n          ></CCBButton>\n        </div>\n      </div>\n    </CCBPopup>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport CCBPopup from \"@/widget/shared/ui/components/Popup/Popup.vue\";\nimport CCBButton from \"@/widget/shared/ui/components/Button/Button.vue\";\nimport {\n  onMounted,\n  ref,\n  toRefs,\n  defineProps,\n  computed,\n  watch,\n  ComputedRef,\n} from \"vue\";\nimport { useFieldsStore } from \"@/widget/app/providers/stores/fieldsStore.ts\";\nimport { useConditionsStore } from \"@/widget/app/providers/stores/conditionsStore.ts\";\nimport { IGeolocationField } from \"@/widget/shared/types/fields\";\nimport { useGeolocationFieldHelper } from \"@/widget/actions/fields/composable/useGeolocationFieldHelper.ts\";\nimport { Loader } from \"@googlemaps/js-api-loader\";\nimport { useTranslationsStore } from \"@/widget/app/providers/stores/translationsStore\";\n\nimport { useCallbackStore } from \"@/widget/app/providers/stores/callbackStore.ts\";\nimport { usePageBreakerStore } from \"@/widget/app/providers/stores/pageBreakerStore.ts\";\n\ntype Props = {\n  field: IGeolocationField & {\n    selectedPoint: { addressName?: string; coordinates?: any; label: string };\n    userSelectedOptions: {\n      addressName?: string;\n      coordinates?: any;\n      addressLink?: string;\n      measure?: string;\n    };\n  };\n};\n\nconst fieldStore = useFieldsStore();\nconst conditionsStore = useConditionsStore();\nconst translationsStore = useTranslationsStore();\nconst callbackStore = useCallbackStore();\nconst pageBreakerStore = usePageBreakerStore();\n\nconst props = defineProps<Props>();\nconst { field } = toRefs(props);\n\nconst popup = ref();\n\ninterface IMultiplyLocation {\n  addressName: string;\n  label: string;\n  coordinates: any;\n}\n\nconst {\n  getGoogleApiKey,\n  mapOptions,\n  generateId,\n  parseLocationCoordinates,\n  generateGoogleLink,\n  getMeasure,\n  getPickUpIconPath,\n} = useGeolocationFieldHelper();\n\nconst loader = new Loader({\n  apiKey: getGoogleApiKey(),\n  version: \"weekly\",\n  libraries: [\"places\", \"geometry\"],\n});\n\n// Variables\nlet randomID = generateId(4);\nlet disableClear = ref(true);\n\n// Methods\nconst showPopup = () => {\n  popup.value.showPopup();\n};\n\nconst hidePopup = () => {\n  popup.value.hidePopup();\n};\n\nlet LocationMap: google.maps.Map;\n\nconst initMap = () => {\n  let firsLocation = (field.value.multiplyLocations[0] as IMultiplyLocation)\n    .coordinates;\n  loader.load().then(() => {\n    const $element = document.getElementById(randomID);\n    if ($element) {\n      LocationMap = new google.maps.Map($element, {\n        ...mapOptions(),\n        center: {\n          ...parseLocationCoordinates(firsLocation),\n        },\n      });\n\n      multiplyLocations.value.forEach((location) => {\n        let settings: google.maps.MarkerOptions = {\n          position: parseLocationCoordinates(location.coordinates),\n          map: LocationMap,\n        };\n\n        if (getPickUpIconPath()) {\n          settings.icon = {\n            url: getPickUpIconPath(),\n            scaledSize: new google.maps.Size(40, 40),\n          };\n        }\n\n        new google.maps.Marker(settings);\n      });\n    }\n  });\n};\n\nconst resetLocation = () => {\n  let firsLocation = (field.value.multiplyLocations[0] as IMultiplyLocation)\n    .coordinates;\n  field.value.selectedPoint = {\n    addressName: \"\",\n    coordinates: firsLocation,\n    label: \"\",\n  };\n  disableClear.value = true;\n  updateValue();\n  hidePopup();\n};\n\nconst setLocation = () => {\n  if (field.value.selectedPoint.addressName) {\n    disableClear.value = false;\n    const userSelectedOptions = {\n      addressName: field.value.selectedPoint.addressName,\n      coordinates: parseLocationCoordinates(\n        field.value.selectedPoint.coordinates,\n      ),\n      addressLink: generateGoogleLink(\n        parseLocationCoordinates(field.value.selectedPoint.coordinates),\n      ),\n      measure: getMeasure(),\n    };\n\n    field.value.userSelectedOptions = userSelectedOptions;\n    updateValue();\n    hidePopup();\n  } else {\n    hidePopup();\n  }\n};\n\nconst getDisplayValue = computed(() => {\n  let displayValue =\n    field.value.selectedPoint.label ||\n    field.value.selectedPoint.addressName ||\n    \"\";\n\n  return displayValue.length > 15\n    ? displayValue.slice(0, 25) + \"...\"\n    : displayValue;\n});\n\nconst updateValue = (alias?: string, fromCondition?: boolean) => {\n  if (alias && alias !== field.value.alias) {\n    return;\n  }\n\n  field.value.displayValue = getDisplayValue.value;\n  fieldStore.updateField(field.value.alias, field.value, fromCondition);\n  conditionsStore.applyConditionForField(field.value.alias);\n\n  if (\n    fieldStore.getPageBreakEnabled &&\n    fieldStore.getActivePage.action === \"not_skip\"\n  ) {\n    pageBreakerStore.checkPageFieldsConditions();\n  }\n};\n\ncallbackStore.add(\"updateGeolocation\", (alias) => {\n  setTimeout(() => {\n    updateValue(alias, true);\n  }, 100);\n});\n\n// computed\nconst multiplyLocations: ComputedRef<IMultiplyLocation[]> = computed(() => {\n  return Array.isArray(field.value.multiplyLocations)\n    ? (field.value.multiplyLocations as IMultiplyLocation[])\n    : [];\n});\n\nwatch(\n  () => field.value.selectedPoint,\n  (val) => {\n    if (val && val.coordinates) {\n      LocationMap.panTo(parseLocationCoordinates(val.coordinates));\n      LocationMap.setZoom(15);\n    }\n  },\n  { deep: true },\n);\n\nonMounted(() => {\n  initMap();\n});\n</script>\n\n<style lang=\"scss\" scoped>\n.ccb-multiply-location {\n  @media (max-width: 540px) {\n    .ccb-location-modal {\n      &__body {\n        display: flex;\n        flex-direction: column;\n        box-sizing: border-box;\n        width: 100%;\n        height: 400px;\n      }\n\n      &__map {\n        width: 100% !important;\n      }\n\n      &__sidebar {\n        height: 170px;\n        box-sizing: border-box;\n        width: 100% !important;\n      }\n\n      &__locations {\n        height: 80%;\n        overflow-x: auto;\n      }\n\n      &__inputs,\n      &__distance,\n      &__footer,\n      &__sidebar {\n        width: 100%;\n      }\n\n      &__footer {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n\n        .ccb-button {\n          &:first-child {\n            grid-column: span 2;\n          }\n\n          &.clear {\n            width: 100%;\n          }\n        }\n      }\n    }\n  }\n\n  @media (max-width: 820px) {\n    .ccb-location-modal__sidebar {\n      width: 32%;\n      padding: 25px 17px;\n    }\n\n    .ccb-location-modal__body {\n      width: 100%;\n    }\n\n    .ccb-location-modal__map {\n      width: 75%;\n    }\n  }\n\n  &__input-wrapper {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n  }\n\n  &__action {\n    background: var(--ccb-fields-color);\n    color: var(--ccb-accent-color);\n    font-size: var(--ccb-fields-button-size);\n    font-weight: var(--ccb-fields-button-weight);\n    border: var(--ccb-button-border) var(--ccb-button-border-style)\n      var(--ccb-accent-color);\n    border-radius: var(--ccb-button-border-radius);\n    height: var(--ccb-field-button-height);\n    padding: 0 15px 0 15px;\n    cursor: pointer;\n    transition: 300ms ease;\n    margin-right: 14px;\n    white-space: nowrap;\n    @media only screen and (max-width: 480px) {\n      min-height: var(--ccb-mobile-field-button-height);\n      font-size: var(--ccb-mobile-fields-button-size);\n      font-weight: var(--ccb-mobile-fields-button-weight);\n    }\n\n    &:hover {\n      background: var(--ccb-accent-color);\n      color: var(--ccb-fields-color);\n    }\n\n    .icon {\n      margin-right: 5px;\n    }\n  }\n\n  &__description {\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 20px;\n    color: var(--ccb-fields-description-color);\n  }\n\n  &__adressname {\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 20px;\n    color: var(--ccb-text-color);\n  }\n}\n</style>\n"],"names":["fieldStore","useFieldsStore","conditionsStore","useConditionsStore","translationsStore","useTranslationsStore","callbackStore","useCallbackStore","pageBreakerStore","usePageBreakerStore","props","__props","field","toRefs","popup","ref","getGoogleApiKey","mapOptions","generateId","parseLocationCoordinates","generateGoogleLink","getMeasure","getPickUpIconPath","useGeolocationFieldHelper","loader","Loader","randomID","disableClear","showPopup","hidePopup","LocationMap","initMap","firsLocation","$element","multiplyLocations","location","settings","resetLocation","updateValue","setLocation","userSelectedOptions","getDisplayValue","computed","displayValue","alias","fromCondition","watch","val","onMounted"],"mappings":"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"}