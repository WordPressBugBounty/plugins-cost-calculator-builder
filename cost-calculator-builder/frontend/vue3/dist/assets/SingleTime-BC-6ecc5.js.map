{"version":3,"file":"SingleTime-BC-6ecc5.js","sources":["../../src/widget/features/submission/order-form/fields/OrderTime/styles/SingleTime.vue"],"sourcesContent":["<template>\n  <div class=\"ccb-single-timePicker\">\n    <VueDatePicker\n      v-model=\"time\"\n      time-picker\n      :is-24=\"format\"\n      minutes-grid-increment=\"5\"\n      placeholder=\"hh:mm\"\n    >\n      <template #input-icon>\n        <i class=\"ccb-icon-timepicker-light-clock\"></i>\n      </template>\n    </VueDatePicker>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, watch, defineEmits, toRefs, computed, onMounted } from \"vue\";\nimport VueDatePicker from \"@vuepic/vue-datepicker\";\nimport \"@vuepic/vue-datepicker/dist/main.css\";\nimport { IFormField } from \"@/widget/shared/types/fields\";\nconst props = defineProps<{\n  field: IFormField;\n}>();\n\nconst { field } = toRefs(props);\nconst emit = defineEmits([\"update:modelValue\"]);\n\nconst formatTime = (time: { hours: number; minutes: number }) => {\n  const { hours, minutes } = time;\n  const formattedMinutes = minutes.toString().padStart(2, \"0\");\n\n  if (!format.value) {\n    const ampm = hours >= 12 ? \"PM\" : \"AM\";\n    const formattedHours = hours % 12 || 12;\n    return `${formattedHours}:${formattedMinutes} ${ampm}`;\n  } else {\n    const formattedHours = hours.toString().padStart(2, \"0\");\n    return `${formattedHours}:${formattedMinutes}`;\n  }\n};\n\nconst format = computed(() => {\n  return field.value?.attributes?.format || false;\n});\n\nconst time = ref<Date | { hours: number; minutes: number; seconds: number }>(\n  new Date(),\n);\n\nonMounted(() => {\n  if (time.value instanceof Date) {\n    const formattedTime = {\n      hours: time.value.getHours(),\n      minutes: time.value.getMinutes(),\n      seconds: time.value.getSeconds(),\n    };\n\n    emit(\"update:modelValue\", formatTime(formattedTime));\n  }\n});\n\nwatch(time, (newTime) => {\n  if (newTime) {\n    let formattedTime;\n    if (newTime instanceof Date) {\n      formattedTime = {\n        hours: newTime.getHours(),\n        minutes: newTime.getMinutes(),\n      };\n    } else {\n      formattedTime = newTime;\n    }\n    emit(\"update:modelValue\", formatTime(formattedTime));\n  }\n});\n</script>\n\n<style lang=\"scss\"></style>\n"],"names":["props","__props","field","toRefs","emit","__emit","formatTime","time","hours","minutes","formattedMinutes","format","ampm","computed","_b","_a","ref","onMounted","formattedTime","watch","newTime"],"mappings":"4VAqBA,MAAMA,EAAQC,EAIR,CAAE,MAAAC,CAAA,EAAUC,EAAOH,CAAK,EACxBI,EAAOC,EAEPC,EAAcC,GAA6C,CACzD,KAAA,CAAE,MAAAC,EAAO,QAAAC,CAAA,EAAYF,EACrBG,EAAmBD,EAAQ,SAAW,EAAA,SAAS,EAAG,GAAG,EAEvD,GAACE,EAAO,MAMH,MAAA,GADgBH,EAAM,SAAW,EAAA,SAAS,EAAG,GAAG,CAC/B,IAAIE,CAAgB,GAN3B,CACX,MAAAE,EAAOJ,GAAS,GAAK,KAAO,KAElC,MAAO,GADgBA,EAAQ,IAAM,EACb,IAAIE,CAAgB,IAAIE,CAAI,EAAA,CAKxD,EAEMD,EAASE,EAAS,IAAM,SACrB,QAAAC,GAAAC,EAAAb,EAAM,QAAN,YAAAa,EAAa,aAAb,YAAAD,EAAyB,SAAU,EAAA,CAC3C,EAEKP,EAAOS,MACP,IACN,EAEA,OAAAC,EAAU,IAAM,CACV,GAAAV,EAAK,iBAAiB,KAAM,CAC9B,MAAMW,EAAgB,CACpB,MAAOX,EAAK,MAAM,SAAS,EAC3B,QAASA,EAAK,MAAM,WAAW,EAC/B,QAASA,EAAK,MAAM,WAAW,CACjC,EAEKH,EAAA,oBAAqBE,EAAWY,CAAa,CAAC,CAAA,CACrD,CACD,EAEKC,EAAAZ,EAAOa,GAAY,CACvB,GAAIA,EAAS,CACP,IAAAF,EACAE,aAAmB,KACLF,EAAA,CACd,MAAOE,EAAQ,SAAS,EACxB,QAASA,EAAQ,WAAW,CAC9B,EAEgBF,EAAAE,EAEbhB,EAAA,oBAAqBE,EAAWY,CAAa,CAAC,CAAA,CACrD,CACD"}