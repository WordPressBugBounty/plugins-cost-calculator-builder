{"version":3,"file":"MultiSelectDropDown-CnlNi9Bj.js","sources":["../../src/widget/features/submission/order-form/fields/OrderDropdown/styles/MultiSelectDropDown.vue"],"sourcesContent":["<template>\n  <div class=\"ccb-field__input-wrapper\" ref=\"dropdownWrapper\">\n    <div class=\"ccb-dropdown multi-select\">\n      <div class=\"ccb-order-dropdown__input\" @click=\"toggleBody\">\n        <i class=\"ccb-icon-Path-3485 ccb-select-arrow\"></i>\n\n        <span\n          v-if=\"\n            field.attributes &&\n            field.attributes.options &&\n            selectedValues.length > 0\n          \"\n          class=\"anchor ccb-heading-5 ccb-light-3 ccb-selected\"\n        >\n          <span\n            v-if=\"selectedValues.length && selectedValues.length < 3\"\n            class=\"selected\"\n            v-for=\"(option, index) in selectedValues\"\n            :key=\"index\"\n          >\n            {{ field.attributes.options[option].optionText }}\n            <i class=\"ccb-icon-close\" @click=\"removeValue(option)\"></i>\n          </span>\n        </span>\n        <span\n          v-if=\"selectedValues.length >= 3\"\n          class=\"anchor ccb-heading-5 ccb-light ccb-selected\"\n        >\n          {{ selectedValues.length }}\n          {{ translationsStore.getTranslations.optionsSelected }}\n        </span>\n        <span\n          v-if=\"selectedValues.length === 0\"\n          class=\"anchor ccb-heading-5 ccb-light-3\"\n        >\n          {{ translationsStore.getTranslations.selectValues }}\n        </span>\n      </div>\n      <div class=\"ccb-order-dropdown__list\">\n        <ul>\n          <template v-if=\"field.attributes?.options\">\n            <li v-for=\"(option, idx) in field.attributes.options\" :key=\"idx\">\n              <div class=\"ccb-default-checkbox\">\n                <label :for=\"field.id + 'order_dropdown_checkbox_' + idx\"\n                  ><input\n                    type=\"checkbox\"\n                    :id=\"field.id + 'order_dropdown_checkbox_' + idx\"\n                    :name=\"getName\"\n                    :checked=\"selectedValues.includes(idx)\"\n                    :value=\"option.optionText\"\n                    @change=\"() => selectValue(idx)\"\n                  /><span class=\"ccb-checkbox-label\">{{\n                    option.optionText\n                  }}</span></label\n                >\n              </div>\n            </li>\n          </template>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, onMounted, toRefs, ref } from \"vue\";\nimport { IFormField } from \"@/widget/shared/types/fields\";\nimport { useOrderFormDropdown } from \"@/widget/actions/pro-features/order-form/composable/useOrderFormDropdown.ts\";\nimport { useOrderForm } from \"@/widget/actions/pro-features/order-form/composable/useOrderForm.ts\";\nimport { useTranslationsStore } from \"@/widget/app/providers/stores/translationsStore\";\n\nconst emit = defineEmits<{\n  (event: \"toggle\", value: boolean): void;\n}>();\n\ntype Props = {\n  field: IFormField;\n};\n\nconst props = defineProps<Props>();\nconst { field } = toRefs(props);\n\nconst dropdownWrapper = ref<HTMLElement | null>(null);\nconst { toggleBody } = useOrderFormDropdown(props, emit, dropdownWrapper);\nconst translationsStore = useTranslationsStore();\n\nconst removeValue = (idx: number): void => {\n  const newValues =\n    field.value.selectedIdx?.filter((innerIdx) => innerIdx !== idx) || [];\n  field.value.selectedIdx = newValues;\n};\n\nconst selectedValues = computed((): number[] => {\n  return field.value.selectedIdx || [];\n});\n\nconst selectValue = (idx: number): void => {\n  let newValues: number[] = field.value.selectedIdx || [];\n  if (selectedValues.value.includes(idx)) {\n    newValues =\n      field.value.selectedIdx?.filter((innerIdx) => innerIdx !== idx) || [];\n  } else {\n    newValues.push(idx);\n  }\n\n  let values: string[] = [];\n  const options = field.value?.attributes?.options || [];\n  for (let i = 0; i < options.length; i++) {\n    const option = options[i];\n    if (newValues.includes(i)) {\n      values.push(option.optionText || \"\");\n    }\n  }\n\n  const { updateValue } = useOrderForm();\n  field.value.value = values;\n  updateValue(field.value.id, field.value.value, newValues);\n};\n\nconst getName = computed(() => {\n  return Math.random().toString(36).substring(2, 15);\n});\n\nonMounted(() => {\n  if (Array.isArray(field.value?.value)) {\n    field.value.value = field.value.value[0];\n  }\n});\n</script>\n\n<style lang=\"scss\">\n.ccb-dropdown {\n  &.multi-select {\n    .ccb-order-dropdown__input {\n      padding: 5px 14px;\n      display: flex;\n      flex-direction: row-reverse;\n      align-items: center;\n      justify-content: flex-end;\n\n      .ccb-select-arrow {\n        position: absolute;\n        right: 15px;\n        top: 50%;\n        font-size: 8px;\n        z-index: 2;\n        opacity: 0.5;\n        transform: translateY(-50%) rotate(0deg);\n        transition: all 200ms ease-in-out;\n      }\n      .selected {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        background-color: color-mix(\n          in srgb,\n          var(--ccb-fields-bg-color) 95%,\n          black\n        );\n        border-radius: 4px;\n        padding: 7px 10px;\n        margin-right: 10px;\n        text-transform: capitalize;\n\n        i {\n          margin-left: 5px;\n          font-size: 10px;\n        }\n      }\n    }\n\n    .ccb-order-dropdown__list {\n      li {\n        padding: 0;\n      }\n      .ccb-default-checkbox {\n        display: flex;\n        gap: 10px;\n        font-size: var(--ccb-field-size);\n        font-weight: var(--ccb-field-weight);\n        color: var(--ccb-text-color);\n        padding: 5px 0px;\n        width: 100%;\n\n        @media only screen and (max-width: 480px) {\n          font-size: var(--ccb-mobile-field-size);\n          font-weight: var(--ccb-mobile-field-weight);\n        }\n\n        label {\n          display: flex;\n          flex-direction: row;\n          justify-content: flex-start;\n          align-items: center;\n          padding: 5px 30px;\n          padding-left: 45px;\n          margin: 0;\n          cursor: pointer;\n          line-height: 1.4;\n          position: relative;\n          width: 100%;\n\n          &:before {\n            left: 14px;\n            content: \"\";\n            max-width: 20px;\n            min-width: 20px;\n            max-height: 20px;\n            min-height: 20px;\n            height: 20px;\n            width: 20px;\n            position: absolute;\n            margin: 0 !important;\n            background-color: var(--ccb-field-bg-color);\n            border: 2px solid var(--ccb-fields-border-color);\n            transition: transform 0.28s ease;\n            box-sizing: border-box;\n            border-radius: 3px;\n          }\n\n          &:after {\n            left: 19px;\n            height: 5px;\n            width: 10px;\n            content: \"\";\n            display: block;\n            position: absolute;\n            border-left: 2px solid #fff;\n            border-bottom: 2px solid #fff;\n            transition: transform ease 0.25s;\n            transform: rotate(-45deg) scale(0) translateY(-10%);\n            box-sizing: border-box;\n          }\n\n          input {\n            display: none;\n          }\n\n          .ccb-checkbox-label {\n            word-break: break-word;\n          }\n        }\n\n        label:has(input[type=\"checkbox\"]:checked):before {\n          background: var(--ccb-accent-color);\n          border-color: var(--ccb-accent-color);\n        }\n\n        label:has(input[type=\"checkbox\"]:checked):after {\n          transform: rotate(-45deg) scale(1) translateY(-10%);\n        }\n      }\n    }\n  }\n}\n\n.ccb-order-dropdown {\n  &.active {\n    .ccb-select-arrow {\n      transform: translateY(-50%) rotate(180deg) !important;\n    }\n  }\n}\n</style>\n"],"names":["emit","__emit","props","__props","field","toRefs","dropdownWrapper","ref","toggleBody","useOrderFormDropdown","translationsStore","useTranslationsStore","removeValue","idx","newValues","_a","innerIdx","selectedValues","computed","selectValue","values","options","_c","_b","i","option","updateValue","useOrderForm","getName","onMounted"],"mappings":"wyBAuEA,MAAMA,EAAOC,EAQPC,EAAQC,EACR,CAAE,MAAAC,CAAA,EAAUC,EAAOH,CAAK,EAExBI,EAAkBC,EAAwB,IAAI,EAC9C,CAAE,WAAAC,CAAW,EAAIC,EAAqBP,EAAOF,EAAMM,CAAe,EAClEI,EAAoBC,EAAqB,EAEzCC,EAAeC,GAAsB,OACnC,MAAAC,IACJC,EAAAX,EAAM,MAAM,cAAZ,YAAAW,EAAyB,OAAQC,GAAaA,IAAaH,KAAQ,CAAC,EACtET,EAAM,MAAM,YAAcU,CAC5B,EAEMG,EAAiBC,EAAS,IACvBd,EAAM,MAAM,aAAe,CAAC,CACpC,EAEKe,EAAeN,GAAsB,WACzC,IAAIC,EAAsBV,EAAM,MAAM,aAAe,CAAC,EAClDa,EAAe,MAAM,SAASJ,CAAG,EAEjCC,IAAAC,EAAAX,EAAM,MAAM,cAAZ,YAAAW,EAAyB,OAAQC,GAAaA,IAAaH,KAAQ,CAAC,EAEtEC,EAAU,KAAKD,CAAG,EAGpB,IAAIO,EAAmB,CAAC,EACxB,MAAMC,IAAUC,GAAAC,EAAAnB,EAAM,QAAN,YAAAmB,EAAa,aAAb,YAAAD,EAAyB,UAAW,CAAC,EACrD,QAASE,EAAI,EAAGA,EAAIH,EAAQ,OAAQG,IAAK,CACjC,MAAAC,EAASJ,EAAQG,CAAC,EACpBV,EAAU,SAASU,CAAC,GACfJ,EAAA,KAAKK,EAAO,YAAc,EAAE,CACrC,CAGI,KAAA,CAAE,YAAAC,CAAY,EAAIC,EAAa,EACrCvB,EAAM,MAAM,MAAQgB,EACpBM,EAAYtB,EAAM,MAAM,GAAIA,EAAM,MAAM,MAAOU,CAAS,CAC1D,EAEMc,EAAUV,EAAS,IAChB,KAAK,SAAS,SAAS,EAAE,EAAE,UAAU,EAAG,EAAE,CAClD,EAED,OAAAW,EAAU,IAAM,OACV,MAAM,SAAQd,EAAAX,EAAM,QAAN,YAAAW,EAAa,KAAK,IAClCX,EAAM,MAAM,MAAQA,EAAM,MAAM,MAAM,CAAC,EACzC,CACD"}