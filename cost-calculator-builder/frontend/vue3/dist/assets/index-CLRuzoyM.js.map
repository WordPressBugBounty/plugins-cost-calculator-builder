{"version":3,"mappings":"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","names":["fieldsInstance","useFields","pageConditions","usePageConditions","props","__props","field","toRefs","currencyInstance","useCurrency","fieldStore","useFieldsStore","appearanceStore","useAppearanceStore","singleFieldMixins","useSingleField","callbackStore","useCallbackStore","translationsStore","useTranslationsStore","conditionsStore","useConditionsStore","values","ref","originalValue","currentComponents","computed","style","_b","_a","defineAsyncComponent","__vitePreload","updateValue","inputValues","alias","value","left","right","getSignValue","getFormatValue","isRequired","additionalClasses","num","rounded","onMounted"],"ignoreList":[],"sources":["../../src/widget/features/calculator-fields/components/MultiRange/MultiRange.vue"],"sourcesContent":["<template>\n  <div\n    class=\"ccb-field ccb-multi-range-field\"\n    :class=\"{\n      required: isRequired,\n      'ccb-field-disabled': field.disabled,\n      [additionalClasses]: true,\n    }\"\n  >\n    <div class=\"ccb-field__label\">\n      <RequiredHint\n        v-if=\"isRequired\"\n        :text=\"translationsStore.getTranslations.requiredField\"\n      />\n      <div class=\"ccb-field__title\">\n        <span\n          class=\"ccb-field__title--title-box\"\n          style=\"display: flex; width: 100%; justify-content: space-between\"\n        >\n          <span\n            >{{ field.label\n            }}<span v-if=\"field.required\" class=\"ccb-field-required-mark\"\n              >*</span\n            ></span\n          >\n          <span> {{ getSignValue }} </span>\n          <ProBadge />\n        </span>\n      </div>\n    </div>\n\n    <div\n      v-if=\"appearanceStore.getAppearanceDescriptionPosition === 'before'\"\n      class=\"ccb-field__descriptions ccb-before\"\n    >\n      <div v-if=\"field.description\" class=\"ccb-field__description\">\n        {{ field.description }}\n      </div>\n    </div>\n\n    <div class=\"ccb-field-input__wrapper\">\n      <component\n        :is=\"currentComponents\"\n        :field=\"field\"\n        @update:modelValue=\"updateValue\"\n        v-model=\"values\"\n      />\n    </div>\n\n    <div\n      v-if=\"appearanceStore.getAppearanceDescriptionPosition === 'after'\"\n      class=\"ccb-field__descriptions ccb-after\"\n    >\n      <div v-if=\"field.description\" class=\"ccb-field__description\">\n        {{ field.description }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { toRefs, computed, ref, onMounted, defineAsyncComponent } from \"vue\";\nimport { IMultiRangeField } from \"@/widget/shared/types/fields\";\nimport { useCurrency } from \"@/widget/actions/fields/composable/useCurrency.ts\";\nimport { useFieldsStore } from \"@/widget/app/providers/stores/fieldsStore.ts\";\nimport { useAppearanceStore } from \"@/widget/app/providers/stores/appearanceStore.ts\";\nimport { useSingleField } from \"@/widget/actions/fields/composable/useSingleField.ts\";\nimport { useCallbackStore } from \"@/widget/app/providers/stores/callbackStore.ts\";\nimport { useConditionsStore } from \"@/widget/app/providers/stores/conditionsStore.ts\";\nimport RequiredHint from \"@/widget/shared/ui/components/Required-hint/RequiredHint.vue\";\nimport ProBadge from \"@/widget/shared/ui/components/Pro-badge/ProBadge.vue\";\nimport { useTranslationsStore } from \"@/widget/app/providers/stores/translationsStore\";\n\nimport { useFields } from \"@/widget/actions/fields/composable/useFields.ts\";\nimport { usePageConditions } from \"@/widget/actions/conditions/composable/usePageConditions.ts\";\n\nconst fieldsInstance = useFields();\nconst pageConditions = usePageConditions();\n\ntype Props = {\n  field: IMultiRangeField;\n};\n\nconst props = defineProps<Props>();\nconst { field } = toRefs(props);\n\nconst currencyInstance = useCurrency();\nconst fieldStore = useFieldsStore();\nconst appearanceStore = useAppearanceStore();\nconst singleFieldMixins = useSingleField();\nconst callbackStore = useCallbackStore();\nconst translationsStore = useTranslationsStore();\nconst conditionsStore = useConditionsStore();\n\nconst values = ref<number[]>(field.value.values || [0, 50]);\nconst originalValue = ref<number>(0);\n\nconst currentComponents = computed(() => {\n  const style = field.value?.styles?.style || \"default\";\n  if (style === \"default\") {\n    return defineAsyncComponent(() => import(\"./styles/Default.vue\"));\n  } else if (style === \"small\") {\n    return defineAsyncComponent(() => import(\"./styles/Small.vue\"));\n  } else if (style === \"flat-minimal\") {\n    return defineAsyncComponent(() => import(\"./styles/Flat.vue\"));\n  } else if (style === \"modern\") {\n    return defineAsyncComponent(() => import(\"./styles/Modern.vue\"));\n  } else if (style === \"input\") {\n    return defineAsyncComponent(() => import(\"./styles/Input.vue\"));\n  } else if (style === \"multi-point\") {\n    return defineAsyncComponent(() => import(\"./styles/MultiPoint.vue\"));\n  }\n\n  return \"\";\n});\n\nconst updateValue = (inputValues: number[], alias?: string) => {\n  if (alias && alias !== field.value.alias) {\n    return;\n  }\n\n  let value = 0;\n  const [left, right] = inputValues;\n\n  values.value = [left, right];\n\n  if (right - left > 0) {\n    value = right - left;\n  }\n\n  originalValue.value = value;\n\n  if (field.value.multiply) {\n    value = value * field.value.unit;\n  }\n\n  value = field.value.round ? Math.round(value) : value;\n\n  field.value.value = value || 0;\n  field.value.values = inputValues;\n\n  field.value.displayValue = singleFieldMixins.getCommonFieldDisplayView(\n    field.value,\n    (right - left).toString(),\n  );\n  fieldStore.updateField(field.value.alias, field.value);\n  conditionsStore.applyConditionForField(field.value.alias);\n\n  if (\n    fieldsInstance.getPageBreakEnabled() &&\n    fieldsInstance.getActivePage().action === \"not_skip\"\n  ) {\n    pageConditions.checkPageFieldsConditions();\n  }\n};\n\nconst getSignValue = computed(() => {\n  if (field.value.multipliedTotal) {\n    return field.value.useCurrency || field.value.fieldCurrency\n      ? currencyInstance.formatCurrency(\n          field.value.value,\n          currencyInstance.getCurrencyOptions(field.value),\n        )\n      : singleFieldMixins.parseCommonFieldSign(\n          field.value.value.toString(),\n          field.value.sign,\n          field.value.unitPosition,\n        );\n  }\n\n  if (field.value.useCurrency) {\n    return field.value.displayValue;\n  }\n\n  return singleFieldMixins.parseCommonFieldSign(\n    field.value.round\n      ? originalValue.value.toString()\n      : getFormatValue(originalValue.value),\n    field.value.sign,\n    field.value.unitPosition,\n  );\n});\n\nconst isRequired = computed(() => {\n  return fieldStore.checkFieldRequired(field.value);\n});\n\nconst additionalClasses = computed(() => {\n  return field.value?.additionalStyles || \"\";\n});\n\nconst getFormatValue = (num: number): string => {\n  const rounded = num.toFixed(2);\n  return parseFloat(rounded).toString();\n};\n\ncallbackStore.add(\"updateMultiRange\", updateValue);\n\nonMounted(() => {\n  const [left, right] = field.value.values;\n  originalValue.value = right - left;\n});\n</script>\n\n<style lang=\"scss\">\n.ccb-multi-range-field {\n  display: flex;\n  flex-direction: column;\n\n  .slider-base {\n    background-color: var(--ccb-fields-border-color) !important;\n  }\n\n  .slider-tooltip,\n  .slider-handle,\n  .slider-connect {\n    background-color: var(--ccb-accent-color) !important;\n  }\n\n  .slider-connects {\n    cursor: pointer;\n  }\n\n  .slider-tooltip {\n    color: var(--ccb-fields-color) !important;\n    border-color: var(--ccb-accent-color) !important;\n  }\n\n  .slider-handle:focus {\n    box-shadow: none !important;\n  }\n}\n</style>\n"],"file":"assets/index-CLRuzoyM.js"}