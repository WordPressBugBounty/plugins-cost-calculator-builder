{"version":3,"mappings":"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","names":["isFloat","n","regExp","props","__props","field","toRefs","requiredType","ref","callbackStore","useCallbackStore","currencyInstance","useCurrency","appearanceStore","useAppearanceStore","fieldStore","useFieldsStore","conditionsStore","useConditionsStore","singleFieldMixins","useSingleField","translationsStore","useTranslationsStore","pageBreakerStore","usePageBreakerStore","rawInput","isEditing","forceUpdateKey","formattedValue","computed","parseFormattedValue","value","parseQuantityValue","getStyleComponent","defineAsyncComponent","__vitePreload","updateValue","updateWithValue","numericValue","alias","fromCondition","checkMinMaxRequired","onInput","event","target","_b","_a","onFocus","e","onBlur","parseField","lessThenExpected","moreThenExpected","toFixedCount","count","toFixedCountDefault","toFixedCountStep","toFixedNoRound","num","decimals","factor","floatVal","settings","useSettingsStore","numAfterInteger","decimalSeparator","thousandsSeparator","_c","_e","_d","_g","_f","_i","_h","parts","sanitizedValue","result","intValueFilter","keyCode","separatorCode","isRequired","getRangeRequiredText","onMounted"],"ignoreList":[],"sources":["../../src/widget/shared/utils/is-float.utils.ts","../../src/widget/features/calculator-fields/components/Quantity/Quantity.vue"],"sourcesContent":["export const isFloat = (n: string): boolean => {\n  if (n === undefined || n?.length < 0) {\n    return false;\n  }\n  const regExp = /^[-+]?[0-9]+\\.[0-9]+$/;\n  return !!n.toString().match(regExp);\n};\n","<template>\n  <div\n    class=\"ccb-field ccb-field-quantity\"\n    :class=\"{\n      required: isRequired,\n      'ccb-field-disabled': field.disabled,\n      [field.additionalStyles || '']: !!field.additionalStyles,\n    }\"\n  >\n    <div class=\"ccb-field__label\">\n      <div v-if=\"isRequired\" class=\"ccb-required-tooltip\">\n        <RequiredHint\n          v-if=\"requiredType === 'value_range'\"\n          :field=\"field\"\n          :text=\"getRangeRequiredText\"\n        />\n        <RequiredHint\n          v-else\n          :field=\"field\"\n          :text=\"translationsStore.getTranslations.requiredField\"\n        />\n      </div>\n      <div class=\"ccb-field__title\">\n        <span>{{ field.label }}</span>\n        <span v-if=\"field.required\" class=\"ccb-field-required-mark\">*</span>\n      </div>\n    </div>\n\n    <div\n      v-if=\"appearanceStore.getAppearanceDescriptionPosition === 'before'\"\n      class=\"ccb-field__descriptions ccb-before\"\n    >\n      <div v-if=\"!field.hideMinMax\" class=\"ccb-field__description\">\n        {{ translationsStore.getTranslations.min }}: {{ field.min }} -\n        {{ translationsStore.getTranslations.max }}: {{ field.max }}\n      </div>\n      <div v-if=\"field.description\" class=\"ccb-field__description\">\n        {{ field.description }}\n      </div>\n    </div>\n\n    <component\n      :is=\"getStyleComponent\"\n      :field=\"field\"\n      :value=\"formattedValue\"\n      @input=\"onInput\"\n      @focus=\"onFocus\"\n      @focusout=\"parseField\"\n      @blur=\"onBlur\"\n      @keypress=\"intValueFilter\"\n      :key=\"forceUpdateKey\"\n    />\n\n    <div\n      v-if=\"appearanceStore.getAppearanceDescriptionPosition === 'after'\"\n      class=\"ccb-field__descriptions ccb-after\"\n    >\n      <div v-if=\"!field.hideMinMax\" class=\"ccb-field__description\">\n        {{ translationsStore.getTranslations.min }}: {{ field.min }} -\n        {{ translationsStore.getTranslations.max }}: {{ field.max }}\n      </div>\n      <div v-if=\"field.description\" class=\"ccb-field__description\">\n        {{ field.description }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { toRefs, computed, ref, onMounted, defineAsyncComponent } from \"vue\";\nimport { IQuantityField } from \"@/widget/shared/types/fields\";\nimport { useAppearanceStore } from \"@/widget/app/providers/stores/appearanceStore.ts\";\nimport { useFieldsStore } from \"@/widget/app/providers/stores/fieldsStore.ts\";\nimport { useConditionsStore } from \"@/widget/app/providers/stores/conditionsStore.ts\";\nimport { useCurrency } from \"@/widget/actions/fields/composable/useCurrency.ts\";\nimport { useSingleField } from \"@/widget/actions/fields/composable/useSingleField.ts\";\nimport { useCallbackStore } from \"@/widget/app/providers/stores/callbackStore.ts\";\nimport RequiredHint from \"@/widget/shared/ui/components/Required-hint/RequiredHint.vue\";\nimport { useTranslationsStore } from \"@/widget/app/providers/stores/translationsStore\";\nimport { useSettingsStore } from \"@/widget/app/providers/stores/settingsStore.ts\";\nimport { isFloat } from \"@/widget/shared/utils/is-float.utils\";\nimport { usePageBreakerStore } from \"@/widget/app/providers/stores/pageBreakerStore.ts\";\n\ntype Props = {\n  field: IQuantityField;\n};\n\nconst props = defineProps<Props>();\nconst { field } = toRefs(props);\n\nconst requiredType = ref<string>(\"required\");\n\nconst callbackStore = useCallbackStore();\nconst currencyInstance = useCurrency();\nconst appearanceStore = useAppearanceStore();\nconst fieldStore = useFieldsStore();\nconst conditionsStore = useConditionsStore();\nconst singleFieldMixins = useSingleField();\nconst translationsStore = useTranslationsStore();\nconst pageBreakerStore = usePageBreakerStore();\n\nconst rawInput = ref<string>(field.value.originalValue.toString());\nconst isEditing = ref<boolean>(false);\nconst forceUpdateKey = ref<number>(0);\n\nconst formattedValue = computed(() => {\n  if (isEditing.value) return rawInput.value;\n\n  rawInput.value = parseFormattedValue(rawInput.value).toString();\n\n  let value = field.value.round ? Math.round(+rawInput.value) : +rawInput.value;\n\n  return parseQuantityValue(value.toString());\n});\n\nconst getStyleComponent = computed(() => {\n  if (field.value.styles.style === \"default\") {\n    return defineAsyncComponent(() => import(`./styles/Default.vue`));\n  }\n\n  if (field.value.styles.style === \"buttons\") {\n    return defineAsyncComponent(() => import(`./styles/Buttons.vue`));\n  }\n});\n\nconst updateValue = (\n  updateWithValue = false,\n  numericValue: number,\n  alias?: string,\n  fromCondition?: boolean,\n) => {\n  if (alias && alias !== field.value.alias) {\n    return;\n  }\n\n  rawInput.value = numericValue.toString();\n  checkMinMaxRequired();\n\n  if (updateWithValue && typeof numericValue !== \"undefined\") {\n    field.value.value = numericValue;\n    field.value.originalValue = numericValue;\n  }\n\n  if (field.value.multiply) {\n    field.value.value = field.value.value * field.value.unit;\n  }\n\n  field.value.displayValue = singleFieldMixins.getCommonFieldDisplayView(\n    field.value,\n    rawInput.value,\n  );\n\n  fieldStore.updateField(field.value.alias, field.value, fromCondition);\n  conditionsStore.applyConditionForField(field.value.alias);\n  if (\n    fieldStore.getPageBreakEnabled &&\n    fieldStore.getActivePage.action === \"not_skip\"\n  ) {\n    pageBreakerStore.checkPageFieldsConditions();\n  }\n};\n\nconst onInput = (event: Event) => {\n  const target = event.target as HTMLInputElement;\n  if (target.value?.toString()?.includes(\",\")) {\n    target.value = target.value.replace(\",\", \".\");\n  }\n  let value = field.value.round\n    ? Math.round(parseFloat(target.value))\n    : parseFloat(target.value);\n\n  if (isNaN(value)) {\n    return;\n  }\n\n  let numericValue = currencyInstance.parseCurrency(\n    value.toString(),\n    currencyInstance.getCurrencyOptions(field.value),\n  );\n\n  updateValue(true, numericValue);\n};\n\nconst onFocus = (e: Event) => {\n  const target = e.target as HTMLInputElement;\n  isEditing.value = true;\n  rawInput.value = target.value;\n};\n\nconst onBlur = () => {\n  isEditing.value = false;\n};\n\nconst parseField = () => {\n  rawInput.value = parseQuantityValue(rawInput.value);\n};\n\nconst checkMinMaxRequired = () => {\n  const lessThenExpected = Number(rawInput.value) < +field.value.min;\n  const moreThenExpected = Number(rawInput.value) > +field.value.max;\n\n  if (lessThenExpected || moreThenExpected) {\n    requiredType.value = \"value_range\";\n  } else {\n    requiredType.value = \"required\";\n  }\n};\n\nconst toFixedCount = computed(() => {\n  let count = 0;\n  if (\n    isFloat(field.value.defaultValue.toString()) ||\n    isFloat(field.value.step.toString())\n  ) {\n    let toFixedCountDefault = field.value.defaultValue.toString().split(\".\")[1]\n      ? field.value.defaultValue.toString().split(\".\")[1].length\n      : 0;\n    let toFixedCountStep = field.value.step.toString().split(\".\")[1]\n      ? field.value.step.toString().split(\".\")[1].length\n      : 0;\n    count = Math.max(toFixedCountDefault, toFixedCountStep);\n  }\n\n  return count;\n});\n\nconst toFixedNoRound = (num: number, decimals: number): number => {\n  const factor = Math.pow(10, decimals);\n  return Math.floor(num * factor) / factor;\n};\n\nconst parseQuantityValue = (value: number | string): string => {\n  if (typeof value === \"number\" && value < 0) {\n    value = 0;\n  }\n\n  value = value.toString().replace(\",\", \".\");\n\n  if (!field.value.enabledCurrencySettings) {\n    const floatVal = parseFloat(value);\n    return toFixedNoRound(floatVal, toFixedCount.value).toString();\n  }\n\n  if (isNaN(Number(value)) || value.length === 0) {\n    value = \"0\";\n  }\n\n  let numericValue = parseFloat(value);\n\n  const settings = useSettingsStore();\n\n  let numAfterInteger: number =\n    settings.getCurrencySettings?.numAfterInteger || 0;\n\n  let decimalSeparator: string =\n    settings.getCurrencySettings?.decimalSeparator || \".\";\n\n  let thousandsSeparator: string =\n    settings.getCurrencySettings?.thousandsSeparator || \",\";\n\n  if (field.value.fieldCurrency) {\n    numAfterInteger = field.value?.fieldCurrencySettings?.numAfterInteger || 0;\n    decimalSeparator =\n      field.value?.fieldCurrencySettings?.decimalSeparator || \".\";\n    thousandsSeparator =\n      field.value?.fieldCurrencySettings?.thousandsSeparator || \",\";\n  }\n\n  if (numAfterInteger > 0) {\n    numericValue = toFixedNoRound(\n      numericValue,\n      parseInt(numAfterInteger.toString()),\n    );\n    value = numericValue.toFixed(numAfterInteger);\n\n    // Set decimal separator\n    value = value.toString().replace(\".\", decimalSeparator);\n\n    // Set thousand separator\n    const parts = value.split(decimalSeparator);\n\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandsSeparator);\n    value = parts.join(decimalSeparator);\n  } else {\n    value = numericValue\n      .toString()\n      .replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandsSeparator);\n  }\n\n  return value;\n};\n\nconst parseFormattedValue = (value: string) => {\n  const settings = useSettingsStore();\n\n  let numAfterInteger: number =\n    settings.getCurrencySettings?.numAfterInteger || 0;\n\n  let decimalSeparator: string =\n    settings.getCurrencySettings?.decimalSeparator || \".\";\n\n  let thousandsSeparator: string =\n    settings.getCurrencySettings?.thousandsSeparator || \",\";\n\n  if (field.value.fieldCurrency) {\n    numAfterInteger = field.value?.fieldCurrencySettings?.numAfterInteger || 0;\n    decimalSeparator =\n      field.value?.fieldCurrencySettings?.decimalSeparator || \".\";\n    thousandsSeparator =\n      field.value?.fieldCurrencySettings?.thousandsSeparator || \",\";\n  }\n\n  let parts;\n  if (value.includes(\".\") && value.includes(\",\")) {\n    parts = value.split(decimalSeparator);\n  } else if (value.includes(\",\")) {\n    parts = value.split(\",\");\n  } else if (value.includes(\".\")) {\n    parts = value.split(\".\");\n  } else {\n    parts = [value];\n  }\n\n  parts[0] = parts[0].split(thousandsSeparator).join(\"\");\n\n  let sanitizedValue = parts.join(\".\");\n\n  let result = parseFloat(sanitizedValue) || 0;\n\n  if (numAfterInteger !== undefined) {\n    let factor = Math.pow(10, numAfterInteger);\n    result = Math.round(result * factor) / factor;\n  }\n\n  return result;\n};\n\nconst intValueFilter = (event: KeyboardEvent): void => {\n  const settings = useSettingsStore();\n\n  let decimalSeparator: string =\n    settings.getCurrencySettings?.decimalSeparator || \".\";\n\n  if (field.value.fieldCurrency) {\n    decimalSeparator =\n      field.value?.fieldCurrencySettings?.decimalSeparator || \".\";\n  }\n\n  let keyCode = event.keyCode ? event.keyCode : event.which;\n  let separatorCode = 46;\n  if (decimalSeparator === \",\") {\n    separatorCode = 44;\n  }\n\n  if ((keyCode < 48 || keyCode > 57) && keyCode !== separatorCode) {\n    // 46 is dot 44 is comma\n    event.preventDefault();\n  }\n};\n\nconst isRequired = computed(() => {\n  const lessThenExpected = Number(rawInput.value) < field.value.min;\n  const moreThenExpected = Number(rawInput.value) > field.value.max;\n\n  if (lessThenExpected || moreThenExpected) {\n    return true;\n  }\n\n  return fieldStore.checkFieldRequired(field.value);\n});\n\nconst getRangeRequiredText = computed(() => {\n  return `\n    ${translationsStore.getTranslations.valueMustBeBetween} ${field.value.min} ${translationsStore.getTranslations.and} ${field.value.max}\n  `;\n});\n\ncallbackStore.add(\"updateQuantity\", updateValue);\n\nonMounted(() => {\n  rawInput.value = field.value.originalValue.toString();\n  updateValue(false, field.value.originalValue, undefined, true);\n});\n</script>\n\n<style lang=\"scss\" scoped>\ninput[type=\"number\"]::-webkit-outer-spin-button,\ninput[type=\"number\"]::-webkit-inner-spin-button {\n  -webkit-appearance: none !important;\n  margin: 0 !important;\n}\n</style>\n"],"file":"assets/index-DyT6JxC8.js"}