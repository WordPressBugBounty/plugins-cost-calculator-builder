{"version":3,"file":"ColumnsChart-CX6H8Udl.js","sources":["../../src/admin/shared/ui/components/charts/ColumnsChart.vue"],"sourcesContent":["<template>\n  <div class=\"ccb-dashboard-card ccb-dashboard-card-chart ccb-columns-chart\">\n    <Skeleton v-if=\"isLoading\"></Skeleton>\n    <div\n      class=\"ccb-dashboard-card-wrapper\"\n      :class=\"{ 'ccb-is-loading': isLoading }\"\n    >\n      <div class=\"ccb-dashboard-chart-header\">\n        <div class=\"ccb-dashboard-chart-controls\">\n          <span>{{ chart.title }}</span>\n        </div>\n        <div class=\"ccb-dashboard-chart-periods\" v-if=\"showGrouping\">\n          <CustomSelect\n            :items=\"periods\"\n            :current=\"period\"\n            placeholder=\"\"\n            @update=\"handlePeriodChange\"\n            :class=\"{ 'ccb-is-loading': isLoading }\"\n          />\n        </div>\n      </div>\n      <div class=\"ccb-dashboard-large-chart\">\n        <VueApexCharts\n          type=\"bar\"\n          height=\"100%\"\n          width=\"100%\"\n          :options=\"daysBarChartOptions\"\n          :series=\"daysBarChartSeries\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, ref, toRefs, onMounted } from \"vue\";\nimport VueApexCharts from \"vue3-apexcharts\";\nimport { IChartData } from \"@/admin/shared/types/analytics/api/response.type\";\nimport { useAnalyticsStore } from \"@/admin/store/analytics/useAnalyticsStore\";\nimport {\n  getPeriods,\n  getAllowedOption,\n  AllowedGroupingsKeys,\n} from \"@/admin/shared/utils/periods\";\nimport { Skeleton } from \"@/admin/shared/ui/components/Skeleton\";\nimport { CustomSelect } from \"@/admin/shared/ui/components/CustomSelect\";\n\ntype Props = {\n  chart: IChartData;\n  page: \"dashboard\" | \"single\";\n};\n\nconst props = defineProps<Props>();\nconst { chart, page } = toRefs(props);\nconst period = ref<AllowedGroupingsKeys>(\"week\");\n\nconst daysBarChartOptions = ref({\n  chart: {\n    type: \"bar\",\n    height: 260,\n    toolbar: { show: false },\n  },\n  plotOptions: {\n    bar: {\n      horizontal: false,\n      columnWidth: \"37px\",\n      borderRadius: 6,\n      distributed: false,\n      dataLabels: {\n        position: \"center\",\n      },\n    },\n  },\n  dataLabels: {\n    enabled: true,\n    style: {\n      fontSize: \"13px\",\n      colors: [\"#fff\"],\n      fontWeight: 500,\n    },\n  },\n  xaxis: {\n    categories: chart.value.categories,\n    labels: {\n      style: {\n        colors: \"#888\",\n        fontSize: \"13px\",\n      },\n    },\n    axisBorder: { show: true, offsetY: 5 },\n    axisTicks: { show: false },\n  },\n  yaxis: {\n    show: false,\n  },\n  grid: {\n    borderColor: \"#f1f1f1\",\n    xaxis: { lines: { show: false } },\n    yaxis: { lines: { show: true } },\n    padding: { left: 22, right: 22 },\n  },\n  colors: [\"#27ae60\"],\n  tooltip: { enabled: true },\n  legend: { show: false },\n});\n\nconst daysBarChartSeries = ref([\n  {\n    name: chart.value.title,\n    data: chart.value.series,\n  },\n]);\n\nconst periods = computed(() => {\n  const store = useAnalyticsStore();\n  const innerPeriods = getPeriods(store.getPeriod);\n  if (!innerPeriods.map((item) => item.value).includes(period.value)) {\n    period.value = getAllowedOption(innerPeriods);\n  }\n\n  return innerPeriods;\n});\n\nconst handlePeriodChange = (key: string) => {\n  const store = useAnalyticsStore();\n  const selectedPeriod = key;\n\n  store.updateChartsGrouping(\n    chart.value.key,\n    selectedPeriod as AllowedGroupingsKeys,\n  );\n};\n\nconst showGrouping = computed(() => {\n  const store = useAnalyticsStore();\n  return (\n    periods.value.length > 0 &&\n    chart.value.key in store.getDashboardChartsGrouping\n  );\n});\n\nconst isLoading = computed(() => {\n  const store = useAnalyticsStore();\n  return store.isLoading;\n});\n\nonMounted(() => {\n  const store = useAnalyticsStore();\n  period.value =\n    page.value === \"dashboard\"\n      ? store.getDashboardChartsGrouping[chart.value.key]\n      : store.getSingleChartsGrouping[chart.value.key];\n});\n</script>\n\n<style lang=\"scss\"></style>\n"],"names":["props","__props","chart","page","toRefs","period","ref","daysBarChartOptions","daysBarChartSeries","periods","computed","store","useAnalyticsStore","innerPeriods","getPeriods","item","getAllowedOption","handlePeriodChange","key","selectedPeriod","showGrouping","isLoading","onMounted"],"mappings":"ovBAoDA,MAAMA,EAAQC,EACR,CAAE,MAAAC,EAAO,KAAAC,GAASC,EAAOJ,CAAK,EAC9BK,EAASC,EAA0B,MAAM,EAEzCC,EAAsBD,EAAI,CAC9B,MAAO,CACL,KAAM,MACN,OAAQ,IACR,QAAS,CAAE,KAAM,EAAM,CACzB,EACA,YAAa,CACX,IAAK,CACH,WAAY,GACZ,YAAa,OACb,aAAc,EACd,YAAa,GACb,WAAY,CACV,SAAU,QAAA,CACZ,CAEJ,EACA,WAAY,CACV,QAAS,GACT,MAAO,CACL,SAAU,OACV,OAAQ,CAAC,MAAM,EACf,WAAY,GAAA,CAEhB,EACA,MAAO,CACL,WAAYJ,EAAM,MAAM,WACxB,OAAQ,CACN,MAAO,CACL,OAAQ,OACR,SAAU,MAAA,CAEd,EACA,WAAY,CAAE,KAAM,GAAM,QAAS,CAAE,EACrC,UAAW,CAAE,KAAM,EAAM,CAC3B,EACA,MAAO,CACL,KAAM,EACR,EACA,KAAM,CACJ,YAAa,UACb,MAAO,CAAE,MAAO,CAAE,KAAM,GAAQ,EAChC,MAAO,CAAE,MAAO,CAAE,KAAM,GAAO,EAC/B,QAAS,CAAE,KAAM,GAAI,MAAO,EAAG,CACjC,EACA,OAAQ,CAAC,SAAS,EAClB,QAAS,CAAE,QAAS,EAAK,EACzB,OAAQ,CAAE,KAAM,EAAM,CAAA,CACvB,EAEKM,EAAqBF,EAAI,CAC7B,CACE,KAAMJ,EAAM,MAAM,MAClB,KAAMA,EAAM,MAAM,MAAA,CACpB,CACD,EAEKO,EAAUC,EAAS,IAAM,CAC7B,MAAMC,EAAQC,EAAkB,EAC1BC,EAAeC,EAAWH,EAAM,SAAS,EAC3C,OAACE,EAAa,IAAKE,GAASA,EAAK,KAAK,EAAE,SAASV,EAAO,KAAK,IACxDA,EAAA,MAAQW,EAAiBH,CAAY,GAGvCA,CAAA,CACR,EAEKI,EAAsBC,GAAgB,CAC1C,MAAMP,EAAQC,EAAkB,EAC1BO,EAAiBD,EAEjBP,EAAA,qBACJT,EAAM,MAAM,IACZiB,CACF,CACF,EAEMC,EAAeV,EAAS,IAAM,CAClC,MAAMC,EAAQC,EAAkB,EAChC,OACEH,EAAQ,MAAM,OAAS,GACvBP,EAAM,MAAM,OAAOS,EAAM,0BAAA,CAE5B,EAEKU,EAAYX,EAAS,IACXE,EAAkB,EACnB,SACd,EAED,OAAAU,EAAU,IAAM,CACd,MAAMX,EAAQC,EAAkB,EAChCP,EAAO,MACLF,EAAK,QAAU,YACXQ,EAAM,2BAA2BT,EAAM,MAAM,GAAG,EAChDS,EAAM,wBAAwBT,EAAM,MAAM,GAAG,CAAA,CACpD"}