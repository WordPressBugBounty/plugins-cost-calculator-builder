{"version":3,"file":"useSingleOptionFieldShared-D5rflcaB.js","sources":["../../src/widget/actions/fields/composable/useSingleOptionFieldShared.ts"],"sourcesContent":["import { computed, toRefs } from \"vue\";\nimport { IOptions, ISingleOptionsField } from \"@/widget/shared/types/fields\";\nimport { useFieldsStore } from \"@/widget/app/providers/stores/fieldsStore.ts\";\nimport { useSingleField } from \"@/widget/actions/fields/composable/useSingleField.ts\";\nimport { useConditionsStore } from \"@/widget/app/providers/stores/conditionsStore.ts\";\nimport { usePageBreakerStore } from \"@/widget/app/providers/stores/pageBreakerStore.ts\";\nimport { useSettingsStore } from \"@/widget/app/providers/stores/settingsStore\";\n\nexport function useSingleOptionFieldShared(props: {\n  field: ISingleOptionsField;\n}) {\n  const { field } = toRefs(props);\n  const conditionsStore = useConditionsStore();\n  const pageBreakerStore = usePageBreakerStore();\n  const fieldStore = useFieldsStore();\n  const singleFieldInstance = useSingleField();\n\n  const selectedOption = computed(() => field.value.selectedOption);\n  const fieldValue = computed(() => selectedOption.value);\n  const isRequired = computed(() => fieldStore.checkFieldRequired(field.value));\n  const getKey = computed(() => selectedOption.value?.optionValue || 99999);\n\n  const selectValue = (option?: IOptions) => {\n    if (option?.optionValue !== selectedOption.value?.optionValue) {\n      let value: number = 0;\n\n      if (\n        option?.optionValue &&\n        field.value.summaryView !== \"show_label_not_calculable\"\n      ) {\n        const optionValue: string = option?.optionValue;\n        value = +optionValue.split(\"_\")[0] || 0;\n      }\n\n      field.value.selectedOption = option;\n      field.value.value = value;\n\n      field.value.displayValue =\n        singleFieldInstance.getMultipleOptionsFieldDisplayView(\n          field.value,\n        ) as string;\n\n      fieldStore.updateField(field.value.alias, field.value);\n      conditionsStore.applyConditionForField(field.value.alias);\n\n      if (\n        fieldStore.getPageBreakEnabled &&\n        fieldStore.getActivePage.action === \"not_skip\"\n      ) {\n        pageBreakerStore.checkPageFieldsConditions();\n      }\n    }\n  };\n\n  const requiredWarningText = computed(() => {\n    const settingStore = useSettingsStore();\n    return settingStore.getWarningTexts?.requiredMsg || \"\";\n  });\n\n  return {\n    field,\n    selectValue,\n    fieldValue,\n    isRequired,\n    getKey,\n    requiredWarningText,\n  };\n}\n"],"names":["useSingleOptionFieldShared","props","field","toRefs","conditionsStore","useConditionsStore","pageBreakerStore","usePageBreakerStore","fieldStore","useFieldsStore","singleFieldInstance","useSingleField","selectedOption","computed","fieldValue","isRequired","getKey","_a","selectValue","option","value","requiredWarningText","useSettingsStore"],"mappings":"+IAQO,SAASA,EAA2BC,EAExC,CACD,KAAM,CAAE,MAAAC,CAAA,EAAUC,EAAOF,CAAK,EACxBG,EAAkBC,EAAmB,EACrCC,EAAmBC,EAAoB,EACvCC,EAAaC,EAAe,EAC5BC,EAAsBC,EAAe,EAErCC,EAAiBC,EAAS,IAAMX,EAAM,MAAM,cAAc,EAC1DY,EAAaD,EAAS,IAAMD,EAAe,KAAK,EAChDG,EAAaF,EAAS,IAAML,EAAW,mBAAmBN,EAAM,KAAK,CAAC,EACtEc,EAASH,EAAS,IAAA,OAAM,QAAAI,EAAAL,EAAe,QAAf,YAAAK,EAAsB,cAAe,MAAK,EAElEC,EAAeC,GAAsB,OACzC,IAAIA,GAAA,YAAAA,EAAQ,iBAAgBF,EAAAL,EAAe,QAAf,YAAAK,EAAsB,aAAa,CAC7D,IAAIG,EAAgB,EAGlBD,GAAA,MAAAA,EAAQ,aACRjB,EAAM,MAAM,cAAgB,8BAG5BkB,EAAQ,EADoBD,GAAA,YAAAA,EAAQ,aACf,MAAM,GAAG,EAAE,CAAC,GAAK,GAGxCjB,EAAM,MAAM,eAAiBiB,EAC7BjB,EAAM,MAAM,MAAQkB,EAEdlB,EAAA,MAAM,aACVQ,EAAoB,mCAClBR,EAAM,KACR,EAEFM,EAAW,YAAYN,EAAM,MAAM,MAAOA,EAAM,KAAK,EACrCE,EAAA,uBAAuBF,EAAM,MAAM,KAAK,EAGtDM,EAAW,qBACXA,EAAW,cAAc,SAAW,YAEpCF,EAAiB,0BAA0B,CAC7C,CAEJ,EAEMe,EAAsBR,EAAS,IAAM,OAElC,QAAAI,EADcK,EAAiB,EAClB,kBAAb,YAAAL,EAA8B,cAAe,EAAA,CACrD,EAEM,MAAA,CACL,MAAAf,EACA,YAAAgB,EACA,WAAAJ,EACA,WAAAC,EACA,OAAAC,EACA,oBAAAK,CACF,CACF"}