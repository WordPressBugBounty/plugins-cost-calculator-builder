{"version":3,"mappings":";8zBAyEA,MAAMA,EAAQC,EACR,CAAE,MAAAC,CAAA,EAAUC,EAAOH,CAAK,EAExBI,EAAaC,EAAe,EAC5BC,EAAkBC,EAAmB,EACrCC,EAAkBC,EAAmB,EACrCC,EAAoBC,EAAe,EACnCC,EAAgBC,EAAiB,EACjCC,EAAmBC,EAAY,EAC/BC,EAAWC,EAAY,CAAC,EACxBC,EAAmBC,EAAoB,EAE7CC,EAAU,IAAM,CACLJ,EAAA,MAAQd,EAAM,MAAM,cACzBA,EAAM,MAAM,cACZA,EAAM,MAAM,IAEJmB,EAAAL,EAAS,MAAO,OAAW,EAAI,EAC5C,EAEK,MAAAM,EAAsBC,EAAS,IAAM,OAElC,QAAAC,EADcC,EAAiB,EAClB,kBAAb,YAAAD,EAA8B,cAAe,GACrD,EAEKE,EAAoBH,EAAS,IAAM,SACvC,MAAMI,IAAQC,GAAAJ,EAAAtB,EAAM,QAAN,YAAAsB,EAAa,SAAb,YAAAI,EAAqB,QAAS,UAC5C,OAAID,IAAU,UACLE,EAAqB,IAAMC,EAAA,WAAO,uBAAsB,qBAAC,EACvDH,IAAU,QACZE,EAAqB,IAAMC,EAAA,WAAO,qBAAoB,uCAAC,EACrDH,IAAU,eACZE,EAAqB,IAAMC,EAAA,WAAO,oBAAmB,uCAAC,EACpDH,IAAU,SACZE,EAAqB,IAAMC,EAAA,WAAO,sBAAqB,uCAAC,EACtDH,IAAU,QACZE,EAAqB,IAAMC,EAAA,WAAO,qBAAoB,uCAAC,EACrDH,IAAU,cACZE,EAAqB,IAAMC,EAAA,WAAO,0BAAyB,uCAAC,EAG9D,GACR,EAEKT,EAAc,CAClBU,EACAC,EACAC,IACG,CACCD,GAASA,IAAU9B,EAAM,MAAM,QAInCc,EAAS,MAAQe,EACjB7B,EAAM,MAAM,cAAgB6B,EAExB7B,EAAM,MAAM,WACN6B,IAAQ7B,EAAM,MAAM,MAGxBA,EAAA,MAAM,MAAQA,EAAM,MAAM,MAAQ,KAAK,MAAM6B,GAAS,CAAC,EAAIA,GAAS,EAEpE7B,EAAA,MAAM,aAAeQ,EAAkB,0BAC3CR,EAAM,MACNc,EAAS,MAAM,SAAS,CAC1B,EAEAZ,EAAW,YAAYF,EAAM,MAAM,MAAOA,EAAM,MAAO+B,CAAa,EACpDzB,EAAA,uBAAuBN,EAAM,MAAM,KAAK,EAGtDE,EAAW,qBACXA,EAAW,cAAc,SAAW,YAEpCc,EAAiB,0BAA0B,EAE/C,EAEMgB,EAAeX,EAAS,IACxBrB,EAAM,MAAM,gBACPA,EAAM,MAAM,aAAeA,EAAM,MAAM,cAC1CY,EAAiB,eACfZ,EAAM,MAAM,MACZY,EAAiB,mBAAmBZ,EAAM,KAAK,GAEjDQ,EAAkB,qBAChBR,EAAM,MAAM,MAAM,SAAS,EAC3BA,EAAM,MAAM,KACZA,EAAM,MAAM,YACd,EAGFA,EAAM,MAAM,aAAeA,EAAM,MAAM,cACrCA,EAAM,MAAM,eAAiB,OACxB,GAAGA,EAAM,MAAM,IAAI,IAAIc,EAAS,KAAK,GAGvC,GAAGA,EAAS,KAAK,IAAId,EAAM,MAAM,IAAI,GAG1CA,EAAM,MAAM,eAAiB,OACxB,GAAGA,EAAM,MAAM,IAAI,IAAIc,EAAS,KAAK,GAGvC,GAAGA,EAAS,KAAK,IAAId,EAAM,MAAM,IAAI,EAC7C,EAEKiC,EAAaZ,EAAS,IACnBnB,EAAW,mBAAmBF,EAAM,KAAK,CACjD,EAEKkC,EAAoBb,EAAS,IAAM,OAChC,QAAAC,EAAAtB,EAAM,QAAN,YAAAsB,EAAa,mBAAoB,GACzC,EAEa,OAAAZ,EAAA,IAAI,cAAeS,CAAW","names":["props","__props","field","toRefs","fieldStore","useFieldsStore","appearanceStore","useAppearanceStore","conditionsStore","useConditionsStore","singleFieldMixins","useSingleField","callbackStore","useCallbackStore","currencyInstance","useCurrency","rawInput","ref","pageBreakerStore","usePageBreakerStore","onMounted","updateValue","requiredWarningText","computed","_a","useSettingsStore","currentComponents","style","_b","defineAsyncComponent","__vitePreload","value","alias","fromCondition","getSignValue","isRequired","additionalClasses"],"ignoreList":[],"sources":["../../src/widget/features/calculator-fields/components/Range/Range.vue"],"sourcesContent":["<template>\n  <div\n    class=\"ccb-field ccb-range-field\"\n    :class=\"{\n      required: isRequired,\n      'ccb-field-disabled': field.disabled,\n      [additionalClasses]: true,\n    }\"\n  >\n    <div class=\"ccb-field__label\">\n      <RequiredHint v-if=\"isRequired\" :text=\"requiredWarningText\" />\n      <div class=\"ccb-field__title\">\n        <span class=\"ccb-field__title--title-box\">\n          <span\n            >{{ field.label\n            }}<span v-if=\"field.required\" class=\"ccb-field-required-mark\"\n              >*</span\n            ></span\n          >\n          <span>\n            {{ getSignValue }}\n          </span>\n        </span>\n      </div>\n    </div>\n\n    <div\n      v-if=\"appearanceStore.getAppearanceDescriptionPosition === 'before'\"\n      class=\"ccb-field__descriptions ccb-before\"\n    >\n      <div v-if=\"field.description\" class=\"ccb-field__description\">\n        {{ field.description }}\n      </div>\n    </div>\n\n    <div class=\"ccb-field-input__wrapper\">\n      <component\n        :is=\"currentComponents\"\n        :field=\"field\"\n        @update:modelValue=\"updateValue\"\n        v-model=\"rawInput\"\n      />\n    </div>\n\n    <div\n      v-if=\"appearanceStore.getAppearanceDescriptionPosition === 'after'\"\n      class=\"ccb-field__descriptions ccb-after\"\n    >\n      <div v-if=\"field.description\" class=\"ccb-field__description\">\n        {{ field.description }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { toRefs, computed, ref, onMounted, defineAsyncComponent } from \"vue\";\nimport { IRangeField } from \"@/widget/shared/types/fields\";\n\nimport { useFieldsStore } from \"@/widget/app/providers/stores/fieldsStore.ts\";\nimport { useAppearanceStore } from \"@/widget/app/providers/stores/appearanceStore.ts\";\nimport { useConditionsStore } from \"@/widget/app/providers/stores/conditionsStore.ts\";\nimport { useSingleField } from \"@/widget/actions/fields/composable/useSingleField.ts\";\nimport { useCallbackStore } from \"@/widget/app/providers/stores/callbackStore.ts\";\nimport { useCurrency } from \"@/widget/actions/fields/composable/useCurrency.ts\";\nimport RequiredHint from \"@/widget/shared/ui/components/Required-hint/RequiredHint.vue\";\nimport { usePageBreakerStore } from \"@/widget/app/providers/stores/pageBreakerStore.ts\";\nimport { useSettingsStore } from \"@/widget/app/providers/stores/settingsStore.ts\";\n\ntype Props = {\n  field: IRangeField;\n};\n\nconst props = defineProps<Props>();\nconst { field } = toRefs(props);\n\nconst fieldStore = useFieldsStore();\nconst appearanceStore = useAppearanceStore();\nconst conditionsStore = useConditionsStore();\nconst singleFieldMixins = useSingleField();\nconst callbackStore = useCallbackStore();\nconst currencyInstance = useCurrency();\nconst rawInput = ref<number>(0);\nconst pageBreakerStore = usePageBreakerStore();\n\nonMounted(() => {\n  rawInput.value = field.value.originalValue\n    ? field.value.originalValue\n    : field.value.min;\n\n  updateValue(rawInput.value, undefined, true);\n});\n\nconst requiredWarningText = computed(() => {\n  const settingStore = useSettingsStore();\n  return settingStore.getWarningTexts?.requiredMsg || \"\";\n});\n\nconst currentComponents = computed(() => {\n  const style = field.value?.styles?.style || \"default\";\n  if (style === \"default\") {\n    return defineAsyncComponent(() => import(\"./styles/Default.vue\"));\n  } else if (style === \"small\") {\n    return defineAsyncComponent(() => import(\"./styles/Small.vue\"));\n  } else if (style === \"flat-minimal\") {\n    return defineAsyncComponent(() => import(\"./styles/Flat.vue\"));\n  } else if (style === \"modern\") {\n    return defineAsyncComponent(() => import(\"./styles/Modern.vue\"));\n  } else if (style === \"input\") {\n    return defineAsyncComponent(() => import(\"./styles/Input.vue\"));\n  } else if (style === \"multi-point\") {\n    return defineAsyncComponent(() => import(\"./styles/MultiPoint.vue\"));\n  }\n\n  return \"\";\n});\n\nconst updateValue = (\n  value: number,\n  alias?: string,\n  fromCondition?: boolean,\n) => {\n  if (alias && alias !== field.value.alias) {\n    return;\n  }\n\n  rawInput.value = value;\n  field.value.originalValue = value;\n\n  if (field.value.multiply) {\n    value = value * field.value.unit;\n  }\n\n  field.value.value = field.value.round ? Math.round(value || 0) : value || 0;\n\n  field.value.displayValue = singleFieldMixins.getCommonFieldDisplayView(\n    field.value,\n    rawInput.value.toString(),\n  );\n\n  fieldStore.updateField(field.value.alias, field.value, fromCondition);\n  conditionsStore.applyConditionForField(field.value.alias);\n\n  if (\n    fieldStore.getPageBreakEnabled &&\n    fieldStore.getActivePage.action === \"not_skip\"\n  ) {\n    pageBreakerStore.checkPageFieldsConditions();\n  }\n};\n\nconst getSignValue = computed(() => {\n  if (field.value.multipliedTotal) {\n    return field.value.useCurrency || field.value.fieldCurrency\n      ? currencyInstance.formatCurrency(\n          field.value.value,\n          currencyInstance.getCurrencyOptions(field.value),\n        )\n      : singleFieldMixins.parseCommonFieldSign(\n          field.value.value.toString(),\n          field.value.sign,\n          field.value.unitPosition,\n        );\n  }\n\n  if (field.value.useCurrency || field.value.fieldCurrency) {\n    if (field.value.unitPosition === \"left\") {\n      return `${field.value.sign} ${rawInput.value}`;\n    }\n\n    return `${rawInput.value} ${field.value.sign}`;\n  }\n\n  if (field.value.unitPosition === \"left\") {\n    return `${field.value.sign} ${rawInput.value}`;\n  }\n\n  return `${rawInput.value} ${field.value.sign}`;\n});\n\nconst isRequired = computed(() => {\n  return fieldStore.checkFieldRequired(field.value);\n});\n\nconst additionalClasses = computed(() => {\n  return field.value?.additionalStyles || \"\";\n});\n\ncallbackStore.add(\"updateRange\", updateValue);\n</script>\n\n<style lang=\"scss\">\n.ccb-range-field {\n  display: flex;\n  flex-direction: column;\n\n  .slider-base {\n    background-color: var(--ccb-fields-border-color) !important;\n  }\n\n  .slider-tooltip,\n  .slider-handle,\n  .slider-connect {\n    background-color: var(--ccb-accent-color);\n  }\n\n  .slider-connects {\n    cursor: pointer;\n  }\n\n  .slider-tooltip {\n    color: var(--ccb-fields-color) !important;\n    border-color: var(--ccb-accent-color) !important;\n    @media (max-width: 1024px) {\n      display: block !important;\n    }\n  }\n\n  .slider-handle:focus {\n    box-shadow: none !important;\n  }\n}\n\n.ccb-field__title {\n  &--title-box {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n  }\n}\n\n:root {\n  --slider-tooltip-min-width: 30px;\n  --slider-connect-bg: var(--ccb-accent-color);\n  --slider-bg: var();\n  --slider-tooltip-bg: var(--ccb-accent-color);\n  --slider-tooltip-color: var(--ccb-fields-text-color);\n}\n</style>\n"],"file":"assets/index-Cc95P_Yj.js"}