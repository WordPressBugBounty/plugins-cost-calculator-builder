{"version":3,"file":"color-filter.utils-DukMf1cu.js","sources":["../../src/widget/shared/utils/color-filter.utils.ts"],"sourcesContent":["\"use strict\";\n\nclass Color {\n  r: number = 0;\n  g: number = 0;\n  b: number = 0;\n\n  constructor(r: number, g: number, b: number) {\n    this.set(r, g, b);\n  }\n\n  toString(): string {\n    return `rgb(${Math.round(this.r)}, ${Math.round(this.g)}, ${Math.round(this.b)})`;\n  }\n\n  set(r: number, g: number, b: number): void {\n    this.r = this.clamp(r);\n    this.g = this.clamp(g);\n    this.b = this.clamp(b);\n  }\n\n  hueRotate(angle = 0): void {\n    angle = (angle / 180) * Math.PI;\n    const sin = Math.sin(angle);\n    const cos = Math.cos(angle);\n\n    this.multiply([\n      0.213 + cos * 0.787 - sin * 0.213,\n      0.715 - cos * 0.715 - sin * 0.715,\n      0.072 - cos * 0.072 + sin * 0.928,\n      0.213 - cos * 0.213 + sin * 0.143,\n      0.715 + cos * 0.285 + sin * 0.14,\n      0.072 - cos * 0.072 - sin * 0.283,\n      0.213 - cos * 0.213 - sin * 0.787,\n      0.715 - cos * 0.715 + sin * 0.715,\n      0.072 + cos * 0.928 + sin * 0.072,\n    ]);\n  }\n\n  grayscale(value = 1): void {\n    this.multiply([\n      0.2126 + 0.7874 * (1 - value),\n      0.7152 - 0.7152 * (1 - value),\n      0.0722 - 0.0722 * (1 - value),\n      0.2126 - 0.2126 * (1 - value),\n      0.7152 + 0.2848 * (1 - value),\n      0.0722 - 0.0722 * (1 - value),\n      0.2126 - 0.2126 * (1 - value),\n      0.7152 - 0.7152 * (1 - value),\n      0.0722 + 0.9278 * (1 - value),\n    ]);\n  }\n\n  sepia(value = 1): void {\n    this.multiply([\n      0.393 + 0.607 * (1 - value),\n      0.769 - 0.769 * (1 - value),\n      0.189 - 0.189 * (1 - value),\n      0.349 - 0.349 * (1 - value),\n      0.686 + 0.314 * (1 - value),\n      0.168 - 0.168 * (1 - value),\n      0.272 - 0.272 * (1 - value),\n      0.534 - 0.534 * (1 - value),\n      0.131 + 0.869 * (1 - value),\n    ]);\n  }\n\n  saturate(value = 1): void {\n    this.multiply([\n      0.213 + 0.787 * value,\n      0.715 - 0.715 * value,\n      0.072 - 0.072 * value,\n      0.213 - 0.213 * value,\n      0.715 + 0.285 * value,\n      0.072 - 0.072 * value,\n      0.213 - 0.213 * value,\n      0.715 - 0.715 * value,\n      0.072 + 0.928 * value,\n    ]);\n  }\n\n  multiply(matrix: number[]): void {\n    const newR = this.clamp(\n      this.r * matrix[0] + this.g * matrix[1] + this.b * matrix[2],\n    );\n    const newG = this.clamp(\n      this.r * matrix[3] + this.g * matrix[4] + this.b * matrix[5],\n    );\n    const newB = this.clamp(\n      this.r * matrix[6] + this.g * matrix[7] + this.b * matrix[8],\n    );\n    this.r = newR;\n    this.g = newG;\n    this.b = newB;\n  }\n\n  brightness(value = 1): void {\n    this.linear(value);\n  }\n\n  contrast(value = 1): void {\n    this.linear(value, -(0.5 * value) + 0.5);\n  }\n\n  linear(slope = 1, intercept = 0): void {\n    this.r = this.clamp(this.r * slope + intercept * 255);\n    this.g = this.clamp(this.g * slope + intercept * 255);\n    this.b = this.clamp(this.b * slope + intercept * 255);\n  }\n\n  invert(value = 1): void {\n    this.r = this.clamp((value + (this.r / 255) * (1 - 2 * value)) * 255);\n    this.g = this.clamp((value + (this.g / 255) * (1 - 2 * value)) * 255);\n    this.b = this.clamp((value + (this.b / 255) * (1 - 2 * value)) * 255);\n  }\n\n  hsl(): { h: number; s: number; l: number } {\n    const r = this.r / 255;\n    const g = this.g / 255;\n    const b = this.b / 255;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0,\n      s = 0;\n    const l = (max + min) / 2;\n\n    if (max !== min) {\n      const d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n        case g:\n          h = (b - r) / d + 2;\n          break;\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n      h /= 6;\n    }\n\n    return { h: h * 100, s: s * 100, l: l * 100 };\n  }\n\n  clamp(value: number): number {\n    return Math.max(0, Math.min(255, value));\n  }\n}\n\nclass Solver {\n  target: Color;\n  targetHSL: { h: number; s: number; l: number };\n  reusedColor: Color;\n\n  constructor(target: Color) {\n    this.target = target;\n    this.targetHSL = target.hsl();\n    this.reusedColor = new Color(0, 0, 0);\n  }\n\n  solve(): { values: number[]; loss: number; filter: string } {\n    const result = this.solveNarrow(this.solveWide());\n    return {\n      values: result.values,\n      loss: result.loss,\n      filter: this.css(result.values),\n    };\n  }\n\n  solveWide(): { values: number[]; loss: number } {\n    const A = 5;\n    const c = 15;\n    const a = [60, 180, 18000, 600, 1.2, 1.2];\n    let best: { values: number[]; loss: number } = {\n      values: [],\n      loss: Infinity,\n    };\n\n    for (let i = 0; best.loss > 25 && i < 3; i++) {\n      const initial = [50, 20, 3750, 50, 100, 100];\n      const result = this.spsa(A, a, c, initial, 1000);\n      if (result.loss < best.loss) {\n        best = result;\n      }\n    }\n    return best;\n  }\n\n  solveNarrow(wide: { values: number[]; loss: number }): {\n    values: number[];\n    loss: number;\n  } {\n    const A = wide.loss;\n    const c = 2;\n    const A1 = A + 1;\n    const a = [0.25 * A1, 0.25 * A1, A1, 0.25 * A1, 0.2 * A1, 0.2 * A1];\n    return this.spsa(A, a, c, wide.values, 500);\n  }\n\n  spsa(\n    A: number,\n    a: number[],\n    c: number,\n    values: number[],\n    iters: number,\n  ): { values: number[]; loss: number } {\n    const alpha = 1;\n    const gamma = 1 / 6;\n\n    let best: number[] = [];\n    let bestLoss = Infinity;\n    const deltas = new Array(6);\n    const highArgs = new Array(6);\n    const lowArgs = new Array(6);\n\n    for (let k = 0; k < iters; k++) {\n      const ck = c / Math.pow(k + 1, gamma);\n      for (let i = 0; i < 6; i++) {\n        deltas[i] = Math.random() > 0.5 ? 1 : -1;\n        highArgs[i] = values[i] + ck * deltas[i];\n        lowArgs[i] = values[i] - ck * deltas[i];\n      }\n\n      const lossDiff = this.loss(highArgs) - this.loss(lowArgs);\n      for (let i = 0; i < 6; i++) {\n        const g = (lossDiff / (2 * ck)) * deltas[i];\n        const ak = a[i] / Math.pow(A + k + 1, alpha);\n        values[i] = this.fix(values[i] - ak * g, i);\n      }\n\n      const loss = this.loss(values);\n      if (loss < bestLoss) {\n        best = values.slice(0);\n        bestLoss = loss;\n      }\n    }\n\n    return { values: best, loss: bestLoss };\n  }\n\n  private fix(value: number, idx: number): number {\n    let max = 100;\n    if (idx === 2) max = 7500;\n    else if (idx === 4 || idx === 5) max = 200;\n\n    if (idx === 3) {\n      value = ((value % max) + max) % max;\n    } else {\n      value = Math.max(0, Math.min(max, value));\n    }\n    return value;\n  }\n\n  loss(filters: number[]): number {\n    const color = this.reusedColor;\n    color.set(0, 0, 0);\n    color.invert(filters[0] / 100);\n    color.sepia(filters[1] / 100);\n    color.saturate(filters[2] / 100);\n    color.hueRotate(filters[3] * 3.6);\n    color.brightness(filters[4] / 100);\n    color.contrast(filters[5] / 100);\n\n    const colorHSL = color.hsl();\n    return (\n      Math.abs(color.r - this.target.r) +\n      Math.abs(color.g - this.target.g) +\n      Math.abs(color.b - this.target.b) +\n      Math.abs(colorHSL.h - this.targetHSL.h) +\n      Math.abs(colorHSL.s - this.targetHSL.s) +\n      Math.abs(colorHSL.l - this.targetHSL.l)\n    );\n  }\n\n  css(filters: number[]): string {\n    const fmt = (idx: number, multiplier = 1): number =>\n      Math.round(filters[idx] * multiplier);\n    return `filter: invert(${fmt(0)}%) sepia(${fmt(1)}%) saturate(${fmt(2)}%) hue-rotate(${fmt(3, 3.6)}deg) brightness(${fmt(4)}%) contrast(${fmt(5)}%);`;\n  }\n}\n\nfunction hexToRgb(hex: string): [number, number, number] | null {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, (_, r, g, b) => r + r + g + g + b + b);\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? [\n        parseInt(result[1], 16),\n        parseInt(result[2], 16),\n        parseInt(result[3], 16),\n      ]\n    : null;\n}\n\nconst colorFilter = (colorParam: string): string => {\n  const rgb = hexToRgb(colorParam);\n  if (!rgb) throw new Error(\"Invalid hex color\");\n\n  const color = new Color(rgb[0], rgb[1], rgb[2]);\n  const solver = new Solver(color);\n  const result = solver.solve();\n  return result.filter;\n};\n\nexport { colorFilter };\n"],"names":["Color","r","g","b","__publicField","angle","sin","cos","value","matrix","newR","newG","newB","slope","intercept","max","min","h","s","l","d","Solver","target","result","a","best","initial","wide","A","c","A1","values","iters","gamma","bestLoss","deltas","highArgs","lowArgs","k","ck","i","lossDiff","ak","loss","idx","filters","color","colorHSL","fmt","multiplier","hexToRgb","hex","shorthandRegex","_","colorFilter","colorParam","rgb"],"mappings":"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"}