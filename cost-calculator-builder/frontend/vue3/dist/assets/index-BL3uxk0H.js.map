{"version":3,"file":"index-BL3uxk0H.js","sources":["../../src/widget/features/calculator-fields/components/Text/Text.vue"],"sourcesContent":["<template>\n  <div\n    class=\"ccb-field ccb-text-field\"\n    :class=\"{\n      required: isRequired,\n      'ccb-field-disabled': field.disabled,\n      [additionalClasses]: true,\n    }\"\n  >\n    <div class=\"ccb-field__label\">\n      <div v-if=\"isRequired\" class=\"ccb-required-tooltip\">\n        <RequiredHint\n          v-if=\"requitedType === 'limit'\"\n          :field=\"field\"\n          :text=\"`${translationsStore.getTranslations.allowedLimitIs} ${field.numberOfCharacters} ${translationsStore.getTranslations.characters}`\"\n        />\n        <RequiredHint v-else :field=\"field\" :text=\"requiredWarningText\" />\n      </div>\n      <div class=\"ccb-field__title\">\n        <span>{{ field.label }}</span>\n        <span v-if=\"field.required\" class=\"ccb-field-required-mark\">*</span>\n      </div>\n    </div>\n\n    <div\n      v-if=\"appearanceStore.getAppearanceDescriptionPosition === 'before'\"\n      class=\"ccb-field__descriptions ccb-before\"\n    >\n      <div v-if=\"field.description\" class=\"ccb-field__description\">\n        {{ field.description }}\n      </div>\n    </div>\n\n    <div class=\"ccb-field__input-wrapper\">\n      <textarea\n        :value=\"field.displayValue\"\n        :placeholder=\"field.placeholder\"\n        @input=\"onInput\"\n      />\n    </div>\n\n    <div\n      v-if=\"appearanceStore.getAppearanceDescriptionPosition === 'after'\"\n      class=\"ccb-field__descriptions ccb-after\"\n    >\n      <div v-if=\"field.description\" class=\"ccb-field__description\">\n        {{ field.description }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { toRefs, computed, ref } from \"vue\";\nimport { ITextField } from \"@/widget/shared/types/fields\";\nimport { useFieldsStore } from \"@/widget/app/providers/stores/fieldsStore.ts\";\nimport { useAppearanceStore } from \"@/widget/app/providers/stores/appearanceStore.ts\";\nimport RequiredHint from \"@/widget/shared/ui/components/Required-hint/RequiredHint.vue\";\nimport { useTranslationsStore } from \"@/widget/app/providers/stores/translationsStore\";\nimport { useSettingsStore } from \"@/widget/app/providers/stores/settingsStore.ts\";\n\ntype Props = {\n  field: ITextField;\n};\n\nconst props = defineProps<Props>();\nconst { field } = toRefs(props);\n\nconst fieldStore = useFieldsStore();\nconst appearanceStore = useAppearanceStore();\nconst translationsStore = useTranslationsStore();\n\nconst requitedType = ref<string>(\"required\");\n\nconst requiredWarningText = computed(() => {\n  const settingStore = useSettingsStore();\n  return settingStore.getWarningTexts?.requiredMsg || \"\";\n});\n\nconst updateValue = (value: string) => {\n  requitedType.value = \"required\";\n  let displayValue: string = value;\n  field.value.value = 0;\n  field.value.displayValue = displayValue;\n\n  const length = field.value.displayValue?.length;\n\n  if (field.value.numberOfCharacters === 0) {\n    field.value.numberOfCharacters = 150;\n  }\n  if (!field.value.numberOfCharacters) {\n    fieldStore.updateField(field.value.alias, field.value);\n    return;\n  }\n\n  requitedType.value =\n    length > field.value.numberOfCharacters ? \"limit\" : \"required\";\n\n  fieldStore.updateField(field.value.alias, field.value);\n};\n\nconst onInput = (event: Event) => {\n  const target = event.target as HTMLInputElement;\n  let value: string = target.value;\n  updateValue(value);\n};\n\nconst isRequired = computed(() => {\n  if (requitedType.value === \"limit\") return true;\n\n  return fieldStore.checkFieldRequired(field.value);\n});\n\nconst additionalClasses = computed(() => {\n  return field.value?.additionalStyles || \"\";\n});\n</script>\n\n<style lang=\"scss\">\n@use \"@/styles/widget/_mixins.scss\" as mixins;\n\n.ccb-text-field {\n  textarea {\n    @include mixins.field;\n  }\n\n  textarea {\n    resize: vertical;\n    min-height: var(--ccb-field-button-height);\n\n    @media only screen and (max-width: 480px) {\n      padding: 12px var(--ccb-mobile-field-side-indent);\n      min-height: var(--ccb-mobile-field-button-height);\n    }\n  }\n}\n\n.ccb-field {\n  &.ccb-text-field {\n    .ccb-field__input-wrapper {\n      display: flex;\n    }\n  }\n}\n</style>\n"],"names":["props","__props","field","toRefs","fieldStore","useFieldsStore","appearanceStore","useAppearanceStore","translationsStore","useTranslationsStore","requitedType","ref","requiredWarningText","computed","_a","useSettingsStore","updateValue","value","displayValue","length","onInput","event","isRequired","additionalClasses"],"mappings":"+xBAiEA,MAAMA,EAAQC,EACR,CAAE,MAAAC,CAAA,EAAUC,EAAOH,CAAK,EAExBI,EAAaC,EAAe,EAC5BC,EAAkBC,EAAmB,EACrCC,EAAoBC,EAAqB,EAEzCC,EAAeC,EAAY,UAAU,EAErCC,EAAsBC,EAAS,IAAM,OAElC,QAAAC,EADcC,EAAiB,EAClB,kBAAb,YAAAD,EAA8B,cAAe,EAAA,CACrD,EAEKE,EAAeC,GAAkB,OACrCP,EAAa,MAAQ,WACrB,IAAIQ,EAAuBD,EAC3Bf,EAAM,MAAM,MAAQ,EACpBA,EAAM,MAAM,aAAegB,EAErB,MAAAC,GAASL,EAAAZ,EAAM,MAAM,eAAZ,YAAAY,EAA0B,OAKrC,GAHAZ,EAAM,MAAM,qBAAuB,IACrCA,EAAM,MAAM,mBAAqB,KAE/B,CAACA,EAAM,MAAM,mBAAoB,CACnCE,EAAW,YAAYF,EAAM,MAAM,MAAOA,EAAM,KAAK,EACrD,MAAA,CAGFQ,EAAa,MACXS,EAASjB,EAAM,MAAM,mBAAqB,QAAU,WAEtDE,EAAW,YAAYF,EAAM,MAAM,MAAOA,EAAM,KAAK,CACvD,EAEMkB,EAAWC,GAAiB,CAEhC,IAAIJ,EADWI,EAAM,OACM,MAC3BL,EAAYC,CAAK,CACnB,EAEMK,EAAaT,EAAS,IACtBH,EAAa,QAAU,QAAgB,GAEpCN,EAAW,mBAAmBF,EAAM,KAAK,CACjD,EAEKqB,EAAoBV,EAAS,IAAM,OAChC,QAAAC,EAAAZ,EAAM,QAAN,YAAAY,EAAa,mBAAoB,EAAA,CACzC"}