{"version":3,"mappings":";w0BAyEA,MAAMA,EAAiBC,EAAU,EAC3BC,EAAiBC,EAAkB,EAMnCC,EAAQC,EACR,CAAE,MAAAC,CAAA,EAAUC,EAAOH,CAAK,EAExBI,EAAaC,EAAe,EAC5BC,EAAkBC,EAAmB,EACrCC,EAAkBC,EAAmB,EACrCC,EAAoBC,EAAe,EACnCC,EAAgBC,EAAiB,EACjCC,EAAmBC,EAAY,EAC/BC,EAAoBC,EAAqB,EACzCC,EAAWC,EAAY,CAAC,EAE9BC,EAAU,IAAM,CACLF,EAAA,MAAQhB,EAAM,MAAM,MAE7BmB,EAAYH,EAAS,KAAK,EAC3B,EAEK,MAAAI,EAAoBC,EAAS,IAAM,SACvC,MAAMC,IAAQC,GAAAC,EAAAxB,EAAM,QAAN,YAAAwB,EAAa,SAAb,YAAAD,EAAqB,QAAS,UAC5C,OAAID,IAAU,UACLG,EAAqB,IAAMC,EAAA,WAAO,uBAAsB,qBAAC,EACvDJ,IAAU,QACZG,EAAqB,IAAMC,EAAA,WAAO,qBAAoB,uCAAC,EACrDJ,IAAU,eACZG,EAAqB,IAAMC,EAAA,WAAO,oBAAmB,uCAAC,EACpDJ,IAAU,SACZG,EAAqB,IAAMC,EAAA,WAAO,sBAAqB,uCAAC,EACtDJ,IAAU,QACZG,EAAqB,IAAMC,EAAA,WAAO,qBAAoB,uCAAC,EACrDJ,IAAU,cACZG,EAAqB,IAAMC,EAAA,WAAO,0BAAyB,uCAAC,EAG9D,GACR,EAEKP,EAAc,CAACQ,EAAeC,IAAmB,CACjDA,GAASA,IAAU5B,EAAM,MAAM,QAInCgB,EAAS,MAAQW,EAEb3B,EAAM,MAAM,WACN2B,IAAQ3B,EAAM,MAAM,MAGxBA,EAAA,MAAM,MAAQA,EAAM,MAAM,MAAQ,KAAK,MAAM2B,GAAS,CAAC,EAAIA,GAAS,EAEpE3B,EAAA,MAAM,aAAeQ,EAAkB,0BAC3CR,EAAM,MACNgB,EAAS,MAAM,SAAS,CAC1B,EAEAd,EAAW,YAAYF,EAAM,MAAM,MAAOA,EAAM,KAAK,EACrCM,EAAA,uBAAuBN,EAAM,MAAM,KAAK,EAGtDN,EAAe,uBACfA,EAAe,cAAc,EAAE,SAAW,YAE1CE,EAAe,0BAA0B,EAE7C,EAEMiC,EAAeR,EAAS,IACxBrB,EAAM,MAAM,gBACPA,EAAM,MAAM,aAAeA,EAAM,MAAM,cAC1CY,EAAiB,eACfZ,EAAM,MAAM,MACZY,EAAiB,mBAAmBZ,EAAM,KAAK,GAEjDQ,EAAkB,qBAChBR,EAAM,MAAM,MAAM,SAAS,EAC3BA,EAAM,MAAM,KACZA,EAAM,MAAM,YACd,EAGFA,EAAM,MAAM,aAAeA,EAAM,MAAM,cAClCA,EAAM,MAAM,aAGjBA,EAAM,MAAM,eAAiB,OACxB,GAAGA,EAAM,MAAM,IAAI,IAAIgB,EAAS,KAAK,GAGvC,GAAGA,EAAS,KAAK,IAAIhB,EAAM,MAAM,IAAI,EAC7C,EAEK8B,EAAaT,EAAS,IACnBnB,EAAW,mBAAmBF,EAAM,KAAK,CACjD,EAEK+B,EAAoBV,EAAS,IAAM,OAChC,QAAAG,EAAAxB,EAAM,QAAN,YAAAwB,EAAa,mBAAoB,GACzC,EAEa,OAAAd,EAAA,IAAI,cAAeS,CAAW","names":["fieldsInstance","useFields","pageConditions","usePageConditions","props","__props","field","toRefs","fieldStore","useFieldsStore","appearanceStore","useAppearanceStore","conditionsStore","useConditionsStore","singleFieldMixins","useSingleField","callbackStore","useCallbackStore","currencyInstance","useCurrency","translationsStore","useTranslationsStore","rawInput","ref","onMounted","updateValue","currentComponents","computed","style","_b","_a","defineAsyncComponent","__vitePreload","value","alias","getSignValue","isRequired","additionalClasses"],"ignoreList":[],"sources":["../../src/widget/features/calculator-fields/components/Range/Range.vue"],"sourcesContent":["<template>\n  <div\n    class=\"ccb-field ccb-range-field\"\n    :class=\"{\n      required: isRequired,\n      'ccb-field-disabled': field.disabled,\n      [additionalClasses]: true,\n    }\"\n  >\n    <div class=\"ccb-field__label\">\n      <RequiredHint\n        v-if=\"isRequired\"\n        :text=\"translationsStore.getTranslations.requiredField\"\n      />\n      <div class=\"ccb-field__title\">\n        <span class=\"ccb-field__title--title-box\">\n          <span\n            >{{ field.label\n            }}<span v-if=\"field.required\" class=\"ccb-field-required-mark\"\n              >*</span\n            ></span\n          >\n          <span>\n            {{ getSignValue }}\n          </span>\n        </span>\n      </div>\n    </div>\n\n    <div\n      v-if=\"appearanceStore.getAppearanceDescriptionPosition === 'before'\"\n      class=\"ccb-field__descriptions ccb-before\"\n    >\n      <div v-if=\"field.description\" class=\"ccb-field__description\">\n        {{ field.description }}\n      </div>\n    </div>\n\n    <div class=\"ccb-field-input__wrapper\">\n      <component\n        :is=\"currentComponents\"\n        :field=\"field\"\n        @update:modelValue=\"updateValue\"\n        v-model=\"rawInput\"\n      />\n    </div>\n\n    <div\n      v-if=\"appearanceStore.getAppearanceDescriptionPosition === 'after'\"\n      class=\"ccb-field__descriptions ccb-after\"\n    >\n      <div v-if=\"field.description\" class=\"ccb-field__description\">\n        {{ field.description }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { toRefs, computed, ref, onMounted, defineAsyncComponent } from \"vue\";\nimport { IRangeField } from \"@/widget/shared/types/fields\";\n\nimport { useFieldsStore } from \"@/widget/app/providers/stores/fieldsStore.ts\";\nimport { useAppearanceStore } from \"@/widget/app/providers/stores/appearanceStore.ts\";\nimport { useConditionsStore } from \"@/widget/app/providers/stores/conditionsStore.ts\";\nimport { useSingleField } from \"@/widget/actions/fields/composable/useSingleField.ts\";\nimport { useCallbackStore } from \"@/widget/app/providers/stores/callbackStore.ts\";\nimport { useCurrency } from \"@/widget/actions/fields/composable/useCurrency.ts\";\nimport RequiredHint from \"@/widget/shared/ui/components/Required-hint/RequiredHint.vue\";\nimport { useTranslationsStore } from \"@/widget/app/providers/stores/translationsStore\";\nimport { useFields } from \"@/widget/actions/fields/composable/useFields.ts\";\nimport { usePageConditions } from \"@/widget/actions/conditions/composable/usePageConditions.ts\";\n\nconst fieldsInstance = useFields();\nconst pageConditions = usePageConditions();\n\ntype Props = {\n  field: IRangeField;\n};\n\nconst props = defineProps<Props>();\nconst { field } = toRefs(props);\n\nconst fieldStore = useFieldsStore();\nconst appearanceStore = useAppearanceStore();\nconst conditionsStore = useConditionsStore();\nconst singleFieldMixins = useSingleField();\nconst callbackStore = useCallbackStore();\nconst currencyInstance = useCurrency();\nconst translationsStore = useTranslationsStore();\nconst rawInput = ref<number>(0);\n\nonMounted(() => {\n  rawInput.value = field.value.value;\n\n  updateValue(rawInput.value);\n});\n\nconst currentComponents = computed(() => {\n  const style = field.value?.styles?.style || \"default\";\n  if (style === \"default\") {\n    return defineAsyncComponent(() => import(\"./styles/Default.vue\"));\n  } else if (style === \"small\") {\n    return defineAsyncComponent(() => import(\"./styles/Small.vue\"));\n  } else if (style === \"flat-minimal\") {\n    return defineAsyncComponent(() => import(\"./styles/Flat.vue\"));\n  } else if (style === \"modern\") {\n    return defineAsyncComponent(() => import(\"./styles/Modern.vue\"));\n  } else if (style === \"input\") {\n    return defineAsyncComponent(() => import(\"./styles/Input.vue\"));\n  } else if (style === \"multi-point\") {\n    return defineAsyncComponent(() => import(\"./styles/MultiPoint.vue\"));\n  }\n\n  return \"\";\n});\n\nconst updateValue = (value: number, alias?: string) => {\n  if (alias && alias !== field.value.alias) {\n    return;\n  }\n\n  rawInput.value = value;\n\n  if (field.value.multiply) {\n    value = value * field.value.unit;\n  }\n\n  field.value.value = field.value.round ? Math.round(value || 0) : value || 0;\n\n  field.value.displayValue = singleFieldMixins.getCommonFieldDisplayView(\n    field.value,\n    rawInput.value.toString(),\n  );\n\n  fieldStore.updateField(field.value.alias, field.value);\n  conditionsStore.applyConditionForField(field.value.alias);\n\n  if (\n    fieldsInstance.getPageBreakEnabled() &&\n    fieldsInstance.getActivePage().action === \"not_skip\"\n  ) {\n    pageConditions.checkPageFieldsConditions();\n  }\n};\n\nconst getSignValue = computed(() => {\n  if (field.value.multipliedTotal) {\n    return field.value.useCurrency || field.value.fieldCurrency\n      ? currencyInstance.formatCurrency(\n          field.value.value,\n          currencyInstance.getCurrencyOptions(field.value),\n        )\n      : singleFieldMixins.parseCommonFieldSign(\n          field.value.value.toString(),\n          field.value.sign,\n          field.value.unitPosition,\n        );\n  }\n\n  if (field.value.useCurrency || field.value.fieldCurrency) {\n    return field.value.displayValue;\n  }\n\n  if (field.value.unitPosition === \"left\") {\n    return `${field.value.sign} ${rawInput.value}`;\n  }\n\n  return `${rawInput.value} ${field.value.sign}`;\n});\n\nconst isRequired = computed(() => {\n  return fieldStore.checkFieldRequired(field.value);\n});\n\nconst additionalClasses = computed(() => {\n  return field.value?.additionalStyles || \"\";\n});\n\ncallbackStore.add(\"updateRange\", updateValue);\n</script>\n\n<style lang=\"scss\">\n.ccb-range-field {\n  display: flex;\n  flex-direction: column;\n\n  .slider-base {\n    background-color: var(--ccb-fields-border-color) !important;\n  }\n\n  .slider-tooltip,\n  .slider-handle,\n  .slider-connect {\n    background-color: var(--ccb-accent-color);\n  }\n\n  .slider-connects {\n    cursor: pointer;\n  }\n\n  .slider-tooltip {\n    color: var(--ccb-fields-color) !important;\n    border-color: var(--ccb-accent-color) !important;\n  }\n\n  .slider-handle:focus {\n    box-shadow: none !important;\n  }\n}\n\n.ccb-field__title {\n  &--title-box {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n  }\n}\n\n:root {\n  --slider-tooltip-min-width: 30px;\n  --slider-connect-bg: var(--ccb-accent-color);\n  --slider-bg: var();\n  --slider-tooltip-bg: var(--ccb-accent-color);\n  --slider-tooltip-color: var(--ccb-fields-text-color);\n}\n</style>\n"],"file":"assets/index-DQwOHMcV.js"}