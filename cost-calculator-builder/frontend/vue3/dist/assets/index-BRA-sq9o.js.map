{"version":3,"file":"index-BRA-sq9o.js","sources":["../../src/widget/features/calculator-fields/components/Group/Group.vue"],"sourcesContent":["<template>\n  <div\n    class=\"ccb-group\"\n    :class=\"{ 'ccb-group-collapsed': collapsed, [additionalClasses]: true }\"\n    :data-accordion=\"accordion\"\n    :data-group-id=\"field.id\"\n  >\n    <div class=\"ccb-group__header\" @click=\"toggleCollapse\">\n      <div class=\"ccb-group__icon\" v-if=\"collapsible\">\n        <i class=\"ccb-icon-Path-3514\"></i>\n      </div>\n      <div class=\"ccb-group__label\" v-if=\"showName\">{{ groupLabel }}</div>\n      <ProBadge />\n    </div>\n    <Transition name=\"fade\">\n      <div class=\"ccb-group__body\" :class=\"{ collapsed: collapsed }\">\n        <div class=\"ccb-group__fields\" ref=\"fields\">\n          <template v-for=\"groupFieldMap in field.groupElements\">\n            <template v-for=\"groupElement in getFieldsFromMap(groupFieldMap)\">\n              <CalculatorField\n                :name=\"groupElement.fieldName\"\n                :field=\"groupElement\"\n              />\n            </template>\n          </template>\n        </div>\n      </div>\n    </Transition>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, ref, toRefs, onMounted, nextTick } from \"vue\";\nimport CalculatorField from \"@/widget/features/calculator-fields/CalculatorField.vue\";\nimport { IGroupField, Field } from \"@/widget/shared/types/fields\";\nimport ProBadge from \"@/widget/shared/ui/components/Pro-badge/ProBadge.vue\";\n\ntype Props = {\n  field: IGroupField;\n};\n\nonMounted(() => {\n  if (collapsedDefault.value) {\n    collapsed.value = true;\n  }\n\n  if (accordion.value) {\n    collapsed.value = true;\n\n    nextTick(() => {\n      const groups = document.querySelectorAll(\".ccb-group\");\n      const bodies = document.querySelectorAll(\".ccb-group__body\");\n\n      bodies.forEach((body) => {\n        body.classList.add(\"collapsed\");\n      });\n\n      groups.forEach((group) => {\n        group.classList.add(\"ccb-group-collapsed\");\n      });\n\n      const firstGroup = groups[0] as HTMLElement;\n      const firstGroupId = firstGroup?.dataset.groupId;\n\n      if (\n        firstGroupId !== undefined &&\n        Number(firstGroupId) === field.value.id\n      ) {\n        firstGroup.classList.remove(\"ccb-group-collapsed\");\n        const firstBody = firstGroup.querySelector(\".ccb-group__body\");\n        if (firstBody) {\n          firstBody.classList.remove(\"collapsed\");\n        }\n        collapsed.value = false;\n      }\n    });\n  }\n});\n\nconst props = defineProps<Props>();\nconst { field } = toRefs(props);\nconst collapsed = ref(false);\n\nconst groupLabel = computed(() => {\n  return field.value.label ? field.value.label : \"Group\";\n});\n\nconst getFieldsFromMap = computed(() => {\n  return (data: Map<string, Field>): Field[] => {\n    return Array.from(data.values());\n  };\n});\n\nconst showName = computed(() => {\n  return field.value.showTitle;\n});\n\nconst collapsible = computed(() => {\n  return field.value.collapsible;\n});\n\nconst accordion = computed(() => {\n  return field.value.accordion;\n});\n\nconst collapsedDefault = computed(() => {\n  return field.value.collapse;\n});\n\nconst toggleCollapse = () => {\n  if (!collapsible.value) return;\n\n  if (accordion.value) {\n    const groups = document.querySelectorAll(\".ccb-group\");\n\n    groups.forEach((groupEl) => {\n      const group = groupEl as HTMLElement;\n      const firstGroupId = group?.dataset.groupId;\n      const body = group.querySelector(\".ccb-group__body\");\n\n      if (\n        firstGroupId !== undefined &&\n        Number(firstGroupId) !== +field.value.id\n      ) {\n        group.classList.add(\"ccb-group-collapsed\");\n        body?.classList.add(\"collapsed\");\n        collapsed.value = true;\n      } else {\n        const isCurrentlyCollapsed = group.classList.contains(\n          \"ccb-group-collapsed\",\n        );\n\n        if (isCurrentlyCollapsed) {\n          group.classList.remove(\"ccb-group-collapsed\");\n          body?.classList.remove(\"collapsed\");\n          collapsed.value = false;\n        } else {\n          group.classList.add(\"ccb-group-collapsed\");\n          body?.classList.add(\"collapsed\");\n          collapsed.value = true;\n        }\n      }\n    });\n  } else {\n    collapsed.value = !collapsed.value;\n  }\n};\n\nconst additionalClasses = computed(() => {\n  return field.value?.additionalStyles || \"\";\n});\n</script>\n\n<style lang=\"scss\">\n.ccb-group {\n  overflow: hidden;\n  border-bottom: 2px solid var(--ccb-container-dark-color);\n  padding-bottom: 20px;\n\n  &__fields {\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    padding: 0 10px;\n  }\n\n  &__body {\n    overflow: visible;\n    transition:\n      max-height 0.4s ease,\n      opacity 0.4s ease;\n    max-height: 5000px;\n    opacity: 1;\n\n    &.collapsed {\n      max-height: 0;\n      opacity: 0;\n    }\n  }\n\n  &.ccb-group-collapsed {\n    .ccb-group__icon {\n      transform: rotate(180deg);\n    }\n  }\n\n  &__header {\n    color: var(--ccb-text-color);\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    cursor: pointer;\n    margin-block: 10px;\n  }\n\n  &__label {\n    font-size: var(--ccb-field-size);\n    font-weight: var(--ccb-field-label-weight);\n    color: var(--ccb-text-color);\n\n    @media only screen and (max-width: 480px) {\n      font-size: var(--ccb-mobile-field-size);\n      font-weight: var(--ccb-mobile-field-label-weight);\n    }\n  }\n\n  &__icon {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 12px;\n    transition: 300ms ease;\n  }\n}\n\n.ccb-horizontal {\n  .ccb_field_with_group {\n    grid-column: 1 / span 2;\n  }\n}\n</style>\n"],"names":["onMounted","collapsedDefault","collapsed","accordion","nextTick","groups","body","group","firstGroup","firstGroupId","field","firstBody","props","__props","toRefs","ref","groupLabel","computed","getFieldsFromMap","data","showName","collapsible","toggleCollapse","groupEl","additionalClasses","_a"],"mappings":"qrBAyCAA,EAAU,IAAM,CACVC,EAAiB,QACnBC,EAAU,MAAQ,IAGhBC,EAAU,QACZD,EAAU,MAAQ,GAElBE,EAAS,IAAM,CACP,MAAAC,EAAS,SAAS,iBAAiB,YAAY,EACtC,SAAS,iBAAiB,kBAAkB,EAEpD,QAASC,GAAS,CAClBA,EAAA,UAAU,IAAI,WAAW,CAAA,CAC/B,EAEMD,EAAA,QAASE,GAAU,CAClBA,EAAA,UAAU,IAAI,qBAAqB,CAAA,CAC1C,EAEK,MAAAC,EAAaH,EAAO,CAAC,EACrBI,EAAeD,GAAA,YAAAA,EAAY,QAAQ,QAEzC,GACEC,IAAiB,QACjB,OAAOA,CAAY,IAAMC,EAAM,MAAM,GACrC,CACWF,EAAA,UAAU,OAAO,qBAAqB,EAC3C,MAAAG,EAAYH,EAAW,cAAc,kBAAkB,EACzDG,GACQA,EAAA,UAAU,OAAO,WAAW,EAExCT,EAAU,MAAQ,EAAA,CACpB,CACD,EACH,CACD,EAED,MAAMU,EAAQC,EACR,CAAE,MAAAH,CAAA,EAAUI,EAAOF,CAAK,EACxBV,EAAYa,EAAI,EAAK,EAErBC,EAAaC,EAAS,IACnBP,EAAM,MAAM,MAAQA,EAAM,MAAM,MAAQ,OAChD,EAEKQ,EAAmBD,EAAS,IACxBE,GACC,MAAM,KAAKA,EAAK,OAAA,CAAQ,CAElC,EAEKC,EAAWH,EAAS,IACjBP,EAAM,MAAM,SACpB,EAEKW,EAAcJ,EAAS,IACpBP,EAAM,MAAM,WACpB,EAEKP,EAAYc,EAAS,IAClBP,EAAM,MAAM,SACpB,EAEKT,EAAmBgB,EAAS,IACzBP,EAAM,MAAM,QACpB,EAEKY,EAAiB,IAAM,CACtBD,EAAY,QAEblB,EAAU,MACG,SAAS,iBAAiB,YAAY,EAE9C,QAASoB,GAAY,CAC1B,MAAMhB,EAAQgB,EACRd,EAAeF,GAAA,YAAAA,EAAO,QAAQ,QAC9BD,EAAOC,EAAM,cAAc,kBAAkB,EAGjDE,IAAiB,QACjB,OAAOA,CAAY,IAAM,CAACC,EAAM,MAAM,IAEhCH,EAAA,UAAU,IAAI,qBAAqB,EACnCD,GAAA,MAAAA,EAAA,UAAU,IAAI,aACpBJ,EAAU,MAAQ,IAEWK,EAAM,UAAU,SAC3C,qBACF,GAGQA,EAAA,UAAU,OAAO,qBAAqB,EACtCD,GAAA,MAAAA,EAAA,UAAU,OAAO,aACvBJ,EAAU,MAAQ,KAEZK,EAAA,UAAU,IAAI,qBAAqB,EACnCD,GAAA,MAAAA,EAAA,UAAU,IAAI,aACpBJ,EAAU,MAAQ,GAEtB,CACD,EAESA,EAAA,MAAQ,CAACA,EAAU,MAEjC,EAEMsB,EAAoBP,EAAS,IAAM,OAChC,QAAAQ,EAAAf,EAAM,QAAN,YAAAe,EAAa,mBAAoB,EAAA,CACzC"}