{"version":3,"file":"useOrderFormDropdown-C2BcLGYF.js","sources":["../../src/widget/actions/pro-features/order-form/composable/useOrderFormDropdown.ts"],"sourcesContent":["import { ref, toRefs, onUnmounted, Ref } from \"vue\";\nimport { IFormField } from \"@/widget/shared/types/fields\";\n\nexport function useOrderFormDropdown(\n  props: { field: IFormField },\n  emit: (event: \"toggle\", value: boolean) => void,\n  dropdownWrapper: Ref<HTMLElement | null>,\n) {\n  const { field } = toRefs(props);\n  const isBodyVisible = ref<boolean>(false);\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (\n      dropdownWrapper.value &&\n      \"contains\" in dropdownWrapper.value &&\n      !dropdownWrapper.value.contains(event.target as Node)\n    ) {\n      isBodyVisible.value = false;\n      emit(\"toggle\", false);\n    }\n  };\n\n  const toggleBody = () => {\n    isBodyVisible.value = !isBodyVisible.value;\n    emit(\"toggle\", isBodyVisible.value);\n\n    if (isBodyVisible.value) {\n      document.addEventListener(\"click\", handleClickOutside);\n    } else {\n      document.removeEventListener(\"click\", handleClickOutside);\n    }\n  };\n\n  onUnmounted(() => {\n    document.removeEventListener(\"click\", handleClickOutside);\n  });\n\n  return {\n    field,\n    isBodyVisible,\n    toggleBody,\n  };\n}\n"],"names":["useOrderFormDropdown","props","emit","dropdownWrapper","field","toRefs","isBodyVisible","ref","handleClickOutside","event","toggleBody","onUnmounted"],"mappings":"iFAGgB,SAAAA,EACdC,EACAC,EACAC,EACA,CACA,KAAM,CAAE,MAAAC,CAAA,EAAUC,EAAOJ,CAAK,EACxBK,EAAgBC,EAAa,EAAK,EAElCC,EAAsBC,GAAsB,CAE9CN,EAAgB,OAChB,aAAcA,EAAgB,OAC9B,CAACA,EAAgB,MAAM,SAASM,EAAM,MAAc,IAEpDH,EAAc,MAAQ,GACtBJ,EAAK,SAAU,EAAK,EAExB,EAEMQ,EAAa,IAAM,CACTJ,EAAA,MAAQ,CAACA,EAAc,MAChCJ,EAAA,SAAUI,EAAc,KAAK,EAE9BA,EAAc,MACP,SAAA,iBAAiB,QAASE,CAAkB,EAE5C,SAAA,oBAAoB,QAASA,CAAkB,CAE5D,EAEA,OAAAG,EAAY,IAAM,CACP,SAAA,oBAAoB,QAASH,CAAkB,CAAA,CACzD,EAEM,CACL,MAAAJ,EACA,cAAAE,EACA,WAAAI,CACF,CACF"}