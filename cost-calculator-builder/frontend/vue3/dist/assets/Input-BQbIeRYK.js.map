{"version":3,"file":"Input-BQbIeRYK.js","sources":["../../src/widget/features/calculator-fields/components/MultiRange/styles/Input.vue"],"sourcesContent":["<template>\n  <div class=\"slider-wrapper ccb-input-multi-range-field\">\n    <div class=\"slider-input\">\n      <input\n        type=\"number\"\n        v-model=\"realValue[0]\"\n        :min=\"min\"\n        :max=\"max\"\n        @change=\"minValueInput\"\n      />\n    </div>\n    <Slider\n      style=\"margin: 10px 0\"\n      :format=\"getFormatValue\"\n      :min=\"field.min\"\n      :max=\"field.max\"\n      :step=\"step\"\n      :disabled=\"field.disabled\"\n      :modelValue=\"modelValue\"\n      @update:modelValue=\"updateValue\"\n      show-tooltip=\"focus\"\n    ></Slider>\n    <div class=\"slider-input\">\n      <input\n        type=\"number\"\n        v-model=\"realValue[1]\"\n        :min=\"min\"\n        :max=\"max\"\n        @change=\"maxValueInput\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { toRefs, ref, computed, watch } from \"vue\";\nimport Slider from \"@vueform/slider\";\nimport { IMultiRangeField } from \"@/widget/shared/types/fields\";\n\ntype Props = {\n  field: IMultiRangeField;\n  modelValue: number[];\n};\n\nconst props = defineProps<Props>();\nconst { field } = toRefs(props);\n\nconst step = computed(() =>\n  field.value.jump ? 1 : Number(field.value.step || 1),\n);\nconst min = computed(() => Number(field.value.min));\nconst max = computed(() => Number(field.value.max));\nconst realValue = ref(props.modelValue);\n\nconst emit = defineEmits<{\n  (event: \"update:modelValue\", value: number[]): void;\n}>();\n\nconst updateValue = (val: number | number[]) => {\n  emit(\"update:modelValue\", Array.isArray(val) ? val : [val]);\n};\n\nconst minValueInput = (e: Event) => {\n  const target = e.target as HTMLInputElement;\n  const value = Number(target.value);\n  if (value < min.value) {\n    target.value = min.value.toString();\n    realValue.value[0] = min.value;\n  }\n};\n\nconst maxValueInput = (e: Event) => {\n  const target = e.target as HTMLInputElement;\n  const value = Number(target.value);\n  if (value > max.value) {\n    target.value = max.value.toString();\n    realValue.value[1] = max.value;\n  }\n};\n\nconst getFormatValue = (num: number): string => {\n  const rounded = num.toFixed(2);\n  return parseFloat(rounded).toString();\n};\n\nwatch(\n  () => props.modelValue,\n  (val) => {\n    realValue.value = val;\n  },\n);\n\nwatch(\n  realValue,\n  (val) => {\n    emit(\"update:modelValue\", val);\n  },\n  { deep: true },\n);\n</script>\n\n<style lang=\"scss\">\n.ccb-input-multi-range-field {\n  position: relative;\n  padding: 6px 0 10px 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  .slider-origin {\n    width: 95%;\n  }\n\n  .slider-base {\n    height: 8px;\n  }\n\n  .slider-handle {\n    width: 32px !important;\n    height: 32px !important;\n    top: calc(\n      (var(--slider-handle-height, 16px) - var(--slider-height, 6px)) / 2 * -1 +\n        -8px\n    ) !important;\n    background-color: #fff !important;\n    box-shadow: 0px 5px 30px 0px rgba(0, 0, 0, 0.1);\n\n    &.slider-active {\n      border: 1px solid var(--ccb-fields-border-color);\n    }\n  }\n\n  .slider-target {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-shrink: 1;\n    padding: 0 20px;\n    width: 100%;\n  }\n\n  .slider-tooltip {\n    bottom: 40px;\n  }\n\n  .slider-input {\n    width: 55px !important;\n    input {\n      appearance: none;\n      -webkit-appearance: none;\n      -moz-appearance: none;\n      border: none;\n      outline: none;\n      background: none;\n      padding: 0;\n      margin: 0;\n      color: var(--ccb-text-color);\n\n      border-radius: 4px;\n      border: 1px solid var(--ccb-fields-border-color);\n      width: 55px !important;\n      padding: 10px;\n      box-sizing: border-box;\n\n      &::-webkit-outer-spin-button,\n      &::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      &[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n    }\n  }\n}\n</style>\n"],"names":["props","__props","field","toRefs","step","computed","min","max","realValue","ref","emit","__emit","updateValue","val","minValueInput","target","maxValueInput","getFormatValue","num","rounded","watch"],"mappings":"yaA4CA,MAAMA,EAAQC,EACR,CAAE,MAAAC,CAAA,EAAUC,EAAOH,CAAK,EAExBI,EAAOC,EAAS,IACpBH,EAAM,MAAM,KAAO,EAAI,OAAOA,EAAM,MAAM,MAAQ,CAAC,CACrD,EACMI,EAAMD,EAAS,IAAM,OAAOH,EAAM,MAAM,GAAG,CAAC,EAC5CK,EAAMF,EAAS,IAAM,OAAOH,EAAM,MAAM,GAAG,CAAC,EAC5CM,EAAYC,EAAIT,EAAM,UAAU,EAEhCU,EAAOC,EAIPC,EAAeC,GAA2B,CACzCH,EAAA,oBAAqB,MAAM,QAAQG,CAAG,EAAIA,EAAM,CAACA,CAAG,CAAC,CAC5D,EAEMC,EAAiB,GAAa,CAClC,MAAMC,EAAS,EAAE,OACH,OAAOA,EAAO,KAAK,EACrBT,EAAI,QACPS,EAAA,MAAQT,EAAI,MAAM,SAAS,EACxBE,EAAA,MAAM,CAAC,EAAIF,EAAI,MAE7B,EAEMU,EAAiB,GAAa,CAClC,MAAMD,EAAS,EAAE,OACH,OAAOA,EAAO,KAAK,EACrBR,EAAI,QACPQ,EAAA,MAAQR,EAAI,MAAM,SAAS,EACxBC,EAAA,MAAM,CAAC,EAAID,EAAI,MAE7B,EAEMU,EAAkBC,GAAwB,CACxC,MAAAC,EAAUD,EAAI,QAAQ,CAAC,EACtB,OAAA,WAAWC,CAAO,EAAE,SAAS,CACtC,EAEA,OAAAC,EACE,IAAMpB,EAAM,WACXa,GAAQ,CACPL,EAAU,MAAQK,CAAA,CAEtB,EAEAO,EACEZ,EACCK,GAAQ,CACPH,EAAK,oBAAqBG,CAAG,CAC/B,EACA,CAAE,KAAM,EAAK,CACf"}